//
Given N friends, each one can remain single or can be paired up with some other friend. Each friend can be paired only once. 
Find out the total number of ways in which friends can remain single or can be paired up.
Note: Since answer can be very large, return your answer mod 10^9+7.


Example 1:

Input:N = 3
Output: 4
Explanation:
{1}, {2}, {3} : All single
{1}, {2,3} : 2 and 3 paired but 1 is single.
{1,2}, {3} : 1 and 2 are paired but 3 is single.
{1,3}, {2} : 1 and 3 are paired but 2 is single.
Note that {1,2} and {2,1} are considered same.
//

    ** Idea : keep this student single or pair this student with any other (i.e n-1 possibilities)
    long long int mod = 1000000007;
    int solve(int n, vector<long long int> &dp) {
        if(n <= 2) {
            return dp[n] = n;
        }
        if(dp[n] != -1) {
            return dp[n];
        }
        int ans = ((solve(n-1, dp))%mod + (n-1)*((solve(n-2, dp))%mod))%mod;

        return dp[n] = ans;
    }
    
    int solveTab(int n) 
    {
        if(n == 0){
            return 0;
        }
        vector<long long> dp(n+1, 0);
        dp[1] = 1;
        dp[2] = 2;
        for(int i=3; i<=n; i++){
            dp[i] = (dp[i-1] + dp[i-2]*(i-1))%1000000007;
        }
        return (dp[n]);
    }
    
    int countFriendsPairings(int n) 
    {
        if(n <= 2) {
            return n;
        }
        // vector<long long int> dp(n+1, -1);
        // return solve(n, dp);
        
        return solveTab(n);
    }
    T.C : O(N)
    S.C : O(N)
