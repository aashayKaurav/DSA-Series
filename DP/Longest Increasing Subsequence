//
Given an array of integers, find the length of the longest (strictly) increasing subsequence from the given array.

Example 1:

Input:
N = 16
A[]={0,8,4,12,2,10,6,14,1,9,5
     13,3,11,7,15}
Output: 6
Explanation:Longest increasing subsequence
0 2 6 9 13 15, which has length 6
Example 2:

Input:
N = 6
A[] = {5,8,3,7,9,1}
Output: 3
Explanation:Longest increasing subsequence
5 7 9, with length 3
//

    int solve(int a[], int curr, int prev, int len, vector<vector<int>> &dp){
        if(curr >= len)
            return 0;
        
        if(dp[curr][prev+1] != -1)
            return dp[curr][prev+1];
        
        int include=0;
        if(prev == -1 || a[curr] > a[prev])
            include = 1 + solve(a, curr+1, curr, len, dp);
        int exclude = 0 + solve(a, curr+1, prev, len, dp);
        
        return dp[curr][prev+1] = max(include, exclude);
    }
    
    int solveTab(int a[], int n){
        vector<vector<int>> dp(n+1, vector<int>(n+1, 0));
        
        for(int ind = n-1; ind>=0; ind--){
            for(int prev = ind-1; prev>=-1; prev--){
                int include = 0;
                if(prev == -1 || a[ind] > a[prev]){
                    include = 1 + dp[ind+1][ind+1];
                }
                int exclude = 0 + dp[ind+1][prev+1];
                
                dp[ind][prev+1] = max(include, exclude);
            }
        }
        return dp[0][0];
    }
    
    int optimal(int a[], int len){
        if(len == 0)
            return 0;
        vector<int> ans;
        ans.push_back(a[0]);
        
        for(int i=1; i<len; i++){
            if(a[i] > ans.back())
                ans.push_back(a[i]);
            else{
                int index = lower_bound(ans.begin(), ans.end(), a[i]) - ans.begin();
                ans[index] = a[i];
            }
        }
        return ans.size();
    }
    
    
    //Function to find length of longest increasing subsequence.
    int longestSubsequence(int n, int a[])
    {
        // vector<vector<int>> dp(n, vector<int>(n+1, -1));
        // return solve(a, 0, -1, n, dp);
        return solveTab(a, n);
        // return optimal(a, n);
    }
