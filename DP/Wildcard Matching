//
Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input: s = "aa", p = "*"
Output: true
Explanation: '*' matches any sequence.
Example 3:

Input: s = "cb", p = "?a"
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.
//

    bool solve(int i, int j, string &s, string &p, vector<vector<int>> &dp) {
        if(i < 0 && j < 0) {
            return true;
        }
        if(i >= 0 && j < 0) {
            return false;
        }
        if(i < 0 && j >= 0) {
            while(j >= 0) {
                if(p[j] != '*') {
                    return false;
                }
                j--;
            }
            return true;
        }
        
        if(dp[i][j] != -1) {
            return dp[i][j];
        }
        if(s[i] == p[j] || p[j] == '?') {
            return dp[i][j] = solve(i-1, j-1, s, p, dp);
        }
        if(p[j] == '*') {
            return dp[i][j] = solve(i-1, j, s, p, dp) || solve(i, j-1, s, p, dp);
        }

        return dp[i][j] = false;
    }

    bool solveTab(string &s, string &p) {
        int n = s.size(), m = p.size();
        vector<vector<bool>> dp(n+1, vector<bool>(m+1, false));
        dp[0][0] = true;
        for(int i=1; i<=n; i++) {
            dp[i][0] = false;
        }
        for (int j = 1; j <= m; j++) {
            bool flag = true;
            for (int temp = j; temp > 0; temp--) {
                if (p[temp - 1] != '*') {
                    flag = false;
                    break;
                }
            }
            dp[0][j] = flag;
        }
        for(int i=1; i<=n; i++) {
            for(int j=1; j<=m; j++) {
                if(s[i-1] == p[j-1] || p[j-1] == '?') {
                    dp[i][j] = dp[i-1][j-1];
                }
                else if(p[j-1] == '*') {
                    dp[i][j] = dp[i-1][j] || dp[i][j-1];
                }
                
            }
        }
        return dp[n][m];
    }

    bool isMatch(string s, string p) {
        // int n = s.size(), m = p.size();

        // vector<vector<int>> dp(n+1, vector<int>(m+1, -1));
        // return solve(n-1, m-1, s, p, dp);

        return solveTab(s, p);
    }
    T.C : O(N*M)
    S.C : O(N*M)
