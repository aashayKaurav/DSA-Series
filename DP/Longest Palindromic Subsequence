//
Given a String, find the longest palindromic subsequence.

Example 1:

Input:
S = "bbabcbcab"
Output: 7
Explanation: Subsequence "babcbab" is the
longest subsequence which is also a palindrome.
Example 2:

Input: 
S = "abcd"
Output: 1
Explanation: "a", "b", "c" and "d" are
palindromic and all have a length 1.
//

    int solve(string &s, int left, int right, vector<vector<int>> &dp) {
        if(left > right) {
            return 0;
        }
        if(left == right) {
            return 1;
        }
        if(dp[left][right] != -1) {
            return dp[left][right];
        }
        int match = 0;
        if(s[left] == s[right]) {
            match = 2 + solve(s, left+1, right-1, dp);
        }
        int notMatch = 0 + max(solve(s, left+1, right, dp), 
            solve(s, left, right-1, dp));
        
        return dp[left][right] = max(match, notMatch);
    }
    OR
    int lcs(int x, int y, string s1, string s2)
    {
        // your code here
        vector<int>prev(y+1, 0), curr(y+1, 0);
        
        for(int i=1; i<=x; i++){
            for(int j=1; j<=y; j++){
                if(s1[i-1]==s2[j-1]){
                     curr[j] = 1 + prev[j-1];
                }else{
                     curr[j] = max(prev[j], curr[j-1]);
                }
            }
            prev = curr;
        }
        return prev[y];
    }
        
    int longestPalinSubseq(string A) {
        //code here
        string s = A;
        reverse(s.begin(), s.end());
        int x = A.size();
        return lcs(x, x, A, s);
    }
