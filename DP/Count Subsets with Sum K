//
You are given an array of n elements and a number X. Find the number of subsets of this array that have a sum of its elements equal to X.
//

    #include <bits/stdc++.h>
    int solve(vector<int> &arr, int ind, int sum, int k, 
    	vector<vector<int>> &dp) {
    	if(sum == k) {
    		return 1;
    	}
    	if(sum > k) {
    		return 0;
    	}
    	if(ind >= arr.size()) {
    		return 0;
    	}
    	if(dp[ind][sum] != -1) {
    		return dp[ind][sum];
    	}
    	// take
    	int take = solve(arr, ind+1, sum+arr[ind], k, dp);
    	int notTake = solve(arr, ind+1, sum, k, dp);
    
    	return dp[ind][sum] = (take + notTake)%1000000007;
    }

    int findWays(vector<int>& arr, int k)
    {
    	vector<vector<int>> dp(arr.size()+1, vector<int>(k+1, -1));
    	return solve(arr, 0, 0, k, dp);
    }
    T.C : O(N*K)
    S.C : O(N*K)
