//
Given an integer N denoting the Length of a line segment. You need to cut the line segment in such a way that the cut length of a line segment each time 
is either x , y or z. Here x, y, and z are integers.
After performing all the cut operations, your total number of cut segments must be maximum.

Note: if no segment can be cut then return 0.

Example 1:

Input:
N = 4
x = 2, y = 1, z = 1
Output: 4
Explanation:Total length is 4, and the cut
lengths are 2, 1 and 1.  We can make
maximum 4 segments each of length 1.
Example 2:

Input:
N = 5
x = 5, y = 3, z = 2
Output: 2
Explanation: Here total length is 5, and
the cut lengths are 5, 3 and 2. We can
make two segments of lengths 3 and 2.
//

    int solve(int n, int x, int y, int z, vector<int> &dp) {
        if(n == 0){
            return 0;
        }
        if(n < 0){
            return INT_MIN;
        }
        if(dp[n] != -1) 
            return dp[n];
            
        int cutX = 1 + solve(n-x, x, y, z, dp);
        int cutY = 1 + solve(n-y, x, y, z, dp);
        int cutZ = 1 + solve(n-z, x, y, z, dp);
        
        return dp[n] =  max(cutX, max(cutY, cutZ));
    }
    
    int solveTab(int n, int x, int y, int z) {
        vector<int> dp(n+1, INT_MIN);
        
        dp[0] = 0;
        for(int i=1; i<=n; i++){
            if(i-x >= 0){
                dp[i] = max(dp[i], dp[i-x]+1);
            }
            if(i-y >= 0){
                dp[i] = max(dp[i], dp[i-y]+1);
            }
            if(i-z >= 0){
                dp[i] = max(dp[i], dp[i-z]+1);
            }
        }
        
        if(dp[n] < 0){
            return 0;
        }
        return dp[n];
    }
    
    //Function to find the maximum number of cuts.
    int maximizeTheCuts(int n, int x, int y, int z)
    {
        // vector<int> dp(n+1, -1);
        // int ans = solve(n, x, y, z, dp);
        // if(ans < 0)
        //     return 0;
        
        // return ans;
        return solveTab(n, x, y, z);
    }
    T.C : O(N)
    S.C : O(N)
