//
Given two strings. The task is to find the length of the longest common substring.

Example 1:

Input: S1 = "ABCDGH", S2 = "ACDGHR", n = 6, m = 6
Output: 4
Explanation: The longest common substring
is "CDGH" which has length 4.
Example 2:

Input: S1 = "ABC", S2 "ACB", n = 3, m = 3
Output: 1
Explanation: The longest common substrings
are "A", "B", "C" all having length 1.
//

    ** IDEA : We need contiguous string (substring). So this code follows very closely the approach of LCS with slide change. Here we will only focus on the just before 
    matching characters and increment the count. Also keep updating the max substring found then return the ans.

    int ans = 0;
        int solvetab(string s1, string s2, int n, int m){
            vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
            
            for(int i=n-1; i>=0; i--){
                for(int j=m-1; j>=0; j--){
                    if(s1[i] == s2[j]){
                        dp[i][j] = 1 + dp[i+1][j+1];
                        
                        ans = max(ans, dp[i][j]);
                    }
                }
            }
            
            return ans;
        }
        int longestCommonSubstr (string S1, string S2, int n, int m)
        {
            return solvetab(S1,S2,n,m);
        }
    T.C : O(N*M)
    S.C : O(N*M)
