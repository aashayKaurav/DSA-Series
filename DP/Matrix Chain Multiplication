//
Given a sequence of matrices, find the most efficient way to multiply these matrices together. The efficient way is the one that involves the 
least number of multiplications.

The dimensions of the matrices are given in an array arr[] of size N (such that N = number of matrices + 1) where the ith matrix has the dimensions (arr[i-1] x arr[i]).

Example 1:

Input: N = 5
arr = {40, 20, 30, 10, 30}
Output: 26000
Explaination: There are 4 matrices of dimension 
40x20, 20x30, 30x10, 10x30. Say the matrices are 
named as A, B, C, D. Out of all possible combinations,
the most efficient way is (A*(B*C))*D. 
The number of operations are -
20*30*10 + 40*20*10 + 40*10*30 = 26000.

Example 2:

Input: N = 4
arr = {10, 30, 5, 60}
Output: 4500
Explaination: The matrices have dimensions 
10*30, 30*5, 5*60. Say the matrices are A, B 
and C. Out of all possible combinations,the
most efficient way is (A*B)*C. The 
number of multiplications are -
10*30*5 + 10*5*60 = 4500.
//

    ** Approach : For N length array we have N-1 Matrices. Take left and right pointers and try to partion the array and solve for these sub problems. For every partion
    calculate the operations + leftPartition + rightPartition. Store the result and return minimum result.

    int solve(int arr[], int left, int right, vector<vector<int>> &dp) {
        
        if(left == right) {
            return 0;
        }
        
        if(dp[left][right] != -1) {
            return dp[left][right];
        }
        
        int ans = 1e9;
        
        for(int k=left; k<right; k++) {
            int cost = arr[left-1] * arr[k] * arr[right];
            int leftCost = solve(arr, left, k, dp);
            int rightCost = solve(arr, k+1, right, dp);
            
            ans = min(ans, cost + leftCost + rightCost);
        }
        
        return dp[left][right] = ans;
        
    }
    
    int solveTab(int arr[], int N) {
        vector<vector<int>> dp(N+1, vector<int>(N+1, 0));
        
        for(int left=N-1; left>=1; left--) {
            for(int right=left+1; right<=N-1; right++) {
                
                int ans = 1e9;
        
                for(int k=left; k<right; k++) {
                    int cost = arr[left-1] * arr[k] * arr[right];
                    int leftCost = dp[left][k];
                    int rightCost = dp[k+1][right];
                    
                    ans = min(ans, cost + leftCost + rightCost);
                }
                
                dp[left][right] = ans;
            }
        }
        return dp[1][N-1];
    }


    int matrixMultiplication(int N, int arr[])
    {
        // vector<vector<int>> dp(N+1, vector<int>(N+1, -1));
        // return solve(arr, 1, N-1, dp);
        
        
        return solveTab(arr, N);
    }
    T.C : O(N^3)
    S.C : O(N^2)

    
