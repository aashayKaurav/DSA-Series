//
Given a rod of length N inches and an array of prices, price[]. price[i] denotes the value of a piece of length i. 
Determine the maximum value obtainable by cutting up the rod and selling the pieces.

Note: Consider 1-based indexing.

Example 1:

Input:
N = 8
Price[] = {1, 5, 8, 9, 10, 17, 17, 20}
Output:
22
Explanation:
The maximum obtainable value is 22 by 
cutting in two pieces of lengths 2 and 
6, i.e., 5+17=22.
Example 2:

Input:
N=8
Price[] = {3, 5, 8, 9, 10, 17, 17, 20}
Output: 
24
Explanation: 
The maximum obtainable value is 
24 by cutting the rod into 8 pieces 
of length 3, i.e, 8*3=24.
//

    int solve(int price[], int ind, int len, vector<vector<int>> &dp) {
        if(ind > len) {
            return 0;
        }
        if(dp[ind][len] != -1) {
            return dp[ind][len];
        }
        // cut ot don't cut.
        int cut = price[ind-1] + solve(price, ind, len-ind, dp);
        
        int notCut = solve(price, ind+1, len, dp);
        
        return dp[ind][len] = max(cut, notCut);
    }
    
  
    int cutRod(int price[], int n) {
        // vector<vector<int>> dp(n+1, vector<int>(n+1, -1));
        // return solve(price, 1, n, dp);
        
        return solveTab(price, n);
    }
