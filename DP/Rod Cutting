//
Given a rod of length N inches and an array of prices, price[]. price[i] denotes the value of a piece of length i. 
Determine the maximum value obtainable by cutting up the rod and selling the pieces.

Note: Consider 1-based indexing.

Example 1:

Input:
N = 8
Price[] = {1, 5, 8, 9, 10, 17, 17, 20}
Output:
22
Explanation:
The maximum obtainable value is 22 by 
cutting in two pieces of lengths 2 and 
6, i.e., 5+17=22.
Example 2:

Input:
N=8
Price[] = {3, 5, 8, 9, 10, 17, 17, 20}
Output: 
24
Explanation: 
The maximum obtainable value is 
24 by cutting the rod into 8 pieces 
of length 3, i.e, 8*3=24.
//

    int solve(int ind, int price[], int n, vector<vector<int>>&dp){
        if(ind == 0){
            return price[0]*n;        // n rods of 1 size
        }
        if(dp[ind][n]!=-1) 
            return dp[ind][n];
        int dont = solve(ind-1, price, n, dp);
        int take = 0;
        if(n >= (ind+1)){
            take = price[ind] + solve(ind, price, n-(ind+1), dp);
        }
        
        return dp[ind][n]= max(dont,take);
    }
    
    int solveTab(int price[], int n) {
        vector<vector<int>> dp(n,vector<int>(n+1,0));
        for(int j=0;j<=n;j++){
            dp[0][j]=price[0]*j;
        }
        
        for(int i=1;i<n;i++){
            for(int j=0;j<=n;j++){
                  int dont=dp[i-1][j];
                  int take=0;
                  if(j>=(i+1)){
                      take=price[i]+dp[i][j-i-1];
                  }
                  
                dp[i][j]= max(dont,take);
            }
        }
        return dp[n-1][n];
    }
    
    int cutRod(int price[], int n) {
        //code herec
        // vector<vector<int>> dp(n,vector<int>(n+1,-1));
        // return func(n-1, price, n, dp);
        return solveTab(price, n);
    }
