//
There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). 
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

Example 2:

Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down
//
    
    // int solve(int i, int j, int m, int n, vector<vector<int>> &dp) {
    //     if(i == m && j == n) {
    //         return 1;
    //     }
    //     if(i > m || j > n) {
    //         return 0;
    //     }
    //     if(dp[i][j] != -1) {
    //         return dp[i][j];
    //     }

    //     int right = solve(i, j+1, m, n, dp);
    //     int bottom = solve(i+1, j, m, n, dp);

    //     return dp[i][j] = right + bottom;
    // }
    // int solveTab(int m, int n) {
    //     vector<vector<int>> dp(m+1, vector<int>(n+1, 0));

    //     dp[0][0] = 1;
    //     for(int i=0; i<m; i++) {
    //         for(int j=0; j<n; j++) {
    //             if(i == 0 || j == 0) {
    //                 dp[i][j] = 1;
    //             }
    //             else{
    //                 dp[i][j] = dp[i-1][j] + dp[i][j-1];
    //             }
    //         }
    //     }
    //     return dp[m-1][n-1];
    // }

    int optimized(int m, int n) {
        vector<int> prev(n+1, 1);
        
        for(int i=1; i<m; i++) {
            vector<int> curr(n+1, 1);
            for(int j=0; j<n; j++) {
                if(j == 0) {
                    curr[j] = 1;
                }
                else{
                    curr[j] = prev[j] + curr[j-1];
                }
            }
            prev = curr;
        }
        return prev[n-1];
    }
 
    int uniquePaths(int m, int n) {
        // vector<vector<int>> dp(m+1, vector<int>(n+1, -1));
        // return solve(0, 0, m-1, n-1, dp);

        //return solveTab(m, n);
        
        return optimized(m, n);
    }
