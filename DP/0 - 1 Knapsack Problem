//
You are given weights and values of N items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. 
Note that we have only one quantity of each item.
In other words, given two integer arrays val[0..N-1] and wt[0..N-1] which represent values and weights associated with N items respectively. 
Also given an integer W which represents knapsack capacity, find out the maximum value subset of val[] such that sum of the weights of this subset is 
smaller than or equal to W. You cannot break an item, either pick the complete item or dont pick it (0-1 property).

Example 1:

Input:
N = 3
W = 4
values[] = {1,2,3}
weight[] = {4,5,1}
Output: 3
Example 2:

Input:
N = 3
W = 3
values[] = {1,2,3}
weight[] = {4,5,6}
Output: 0
//

    int solve(int W, int wt[], int val[], int index, vector<vector<int>> &dp){
        if(index == 0){
            if(wt[0] <= W){
                return val[0]; 
            }
            else{
                return 0;
            }
        }
        if(dp[index][W] != -1){
            return dp[index][W];
        }
        int include=0;
        if(wt[index] <= W){
            include = val[index] + solve(W-wt[index], wt, val, index-1, dp);
        }
        int exclude = solve(W, wt, val, index-1, dp);
         
        return dp[index][W] = max(include, exclude);
        
    }
    
    int solveTab(int wt[], int val[], int W, int n) {
        vector<vector<int>> dp(n+1, vector<int>(W+1, 0));
        
        for(int i=wt[0]; i<=W; i++) {
            if(wt[0] <= W){
                dp[0][i] = val[0];
            }
            else{
                dp[0][i] = 0;
            }
        }
        for(int i=1; i<n; i++) {
            for(int j=0; j<=W; j++) {
                int include=0;
                if(wt[i] <= j){
                    include = val[i] + dp[i-1][j-wt[i]];
                }
                int exclude = dp[i-1][j];
                 
                dp[i][j] = max(include, exclude);
            }
        }
        return dp[n-1][W];
    }
    
    int optimized(int wt[], int val[], int W, int n) {
        vector<int> prev(W+1, 0);
        vector<int> curr(W+1, 0);
        
        for(int i=wt[0]; i<=W; i++) {
            if(wt[0] <= W){
                prev[i] = val[0];
            }
            else{
                prev[i] = 0;
            }
        }
        for(int i=1; i<n; i++) {
            for(int j=0; j<=W; j++) {
                int include=0;
                if(wt[i] <= j){
                    include = val[i] + prev[j-wt[i]];
                }
                int exclude = prev[j];
                 
                curr[j] = max(include, exclude);
            }
            prev = curr;
        }
        return prev[W];
    }
    
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int W, int wt[], int val[], int n) 
    {
        // vector<vector<int>> dp(n, vector<int>(W+1, -1));
        // return solve(W, wt, val, n-1, dp);
        
        //return solveTab(wt, val, W, n);
        
        return optimized(wt, val, W, n);
    }
