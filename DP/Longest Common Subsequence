//
Given two sequences, find the length of longest subsequence present in both of them. Both the strings are of uppercase.

Example 1:

Input:
A = 6, B = 6
str1 = ABCDGH
str2 = AEDFHR
Output: 3
Explanation: LCS for input Sequences
“ABCDGH” and “AEDFHR” is “ADH” of
length 3.
Example 2:

Input:
A = 3, B = 2
str1 = ABC
str2 = AC
Output: 2
Explanation: LCS of "ABC" and "AC" is
"AC" of length 2.
//

    int solve(string &s1, string &s2, int i, int j, vector<vector<int>> &dp) {
        if(i < 0 || j < 0) {
            return 0;
        }
        if(dp[i][j] != -1) {
            return dp[i][j];
        }
        if(s1[i] == s2[j]) {
            return dp[i][j] = 1 + solve(s1, s2, i-1, j-1, dp);
        }
        return dp[i][j] = max(solve(s1, s2, i-1, j, dp), solve(s1, s2, i, j-1, dp));
    }
    
    int solveTab(int x, int y, string s1, string s2) {
        vector<vector<int>> dp(x+1, vector<int>(y+1, 0));
        for (int i = 1; i <= x; i++) {
            for (int j = 1; j <= y; j++) {
                if (s1[i - 1] == s2[j - 1]) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[x][y];
    }
    
    int optimized(int x, int y, string s1, string s2) {
        vector<int> prev(1001, 0);
        vector<int> curr(1001, 0);
        for (int i = 1; i <= x; i++) {
            for (int j = 1; j <= y; j++) {
                if (s1[i - 1] == s2[j - 1]) {
                    curr[j] = 1 + prev[j - 1];
                } else {
                    curr[j] = max(prev[j], curr[j - 1]);
                }
            }
            prev = curr;
        }
        return prev[y];
    }
    
    //Function to find the length of longest common subsequence in two strings.
    int lcs(int x, int y, string s1, string s2)
    {
        // vector<vector<int>> dp(x, vector<int>(y, -1));
        // return solve(s1, s2, x-1, y-1, dp);
        // return solveTab(x, y, s1, s2);
        
        return optimized(x, y, s1, s2);
    }
