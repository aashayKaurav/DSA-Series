//
A top secret message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
You are an FBI agent. You have to determine the total number of ways that message can be decoded, as the answer can be large return the answer modulo 109 + 7.
Note: An empty digit sequence is considered to have one decoding. It may be assumed that the input contains valid digits from 0 to 9 
and If there are leading 0s, extra trailing 0s and two or more consecutive 0s then it is an invalid string.

Example 1:

Input: str = "123"
Output: 3
Explanation: "123" can be decoded as "ABC"(123),
"LC"(12 3) and "AW"(1 23).

//
top-down :
      long long int mod = 1e9 + 7;
	    
	    int solve(string &s, int i, vector<int> &dp){
	        if(i >= s.size())
	            return 1;
	        if(dp[i] != -1)
	            return dp[i];
	        else if(s[i] == '0')
	            return 0;
          // this is the critical base case, sine we have reached last digit then we have to handle only one digit case 
          // therefore simply returing 1.
	        else if(i == s.size()-1){
	            return 1;
	        }
	        int c1 = 0, c2 = 0;
          // if the first digit is 1 or 2 (for 2 the next digit should br between 0-6) then we have two possibilities.
          // i.e either take one digit or take two digits.
	        if(s[i] == '1' || (s[i] == '2' && s[i+1]-'0' >= 0 && s[i+1]-'0' <= 6)){
	            c1 = solve(s, i+1, dp) + solve(s, i+2, dp);
	        }
          // otherwise take only one digit and move i by one.
	        else{
	            c2 = solve(s, i+1, dp);
	        }
	        return dp[i] = (c1+c2)%mod;
	    }
	    
		int CountWays(string str){
		    vector<int> dp(str.size()+2, -1);
		    return solve(str, 0, dp);
		}
