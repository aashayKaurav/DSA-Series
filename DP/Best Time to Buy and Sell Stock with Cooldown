//
You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the 
following restrictions:

After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

Example 1:

Input: prices = [1,2,3,0,2]
Output: 3
Explanation: transactions = [buy, sell, cooldown, buy, sell]
Example 2:

Input: prices = [1]
Output: 0
//

    ** Approach : Just only thing to observe is that after selling a stock then we will increment index by 2 not by 1, since we need cooldown!!

    int solve(int ind, bool buy, vector<int> &prices, vector<vector<int>> &dp) {
        if(ind >= prices.size()) {
            return 0;
        }

        if(dp[ind][buy] != -1) {
            return dp[ind][buy];
        }

        if(buy) {
            int buying = -prices[ind] + solve(ind+1, false, prices, dp);
            int notBuying = 0 + solve(ind+1, true, prices, dp);

            return dp[ind][buy] = max(buying, notBuying);
        }
        else {
            int selling = prices[ind] + solve(ind+2, true, prices, dp);
            int notSelling = 0 + solve(ind+1, false, prices, dp);

            return dp[ind][buy] = max(selling, notSelling);
        }
    }

    int solveTab(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n+2, vector<int>(2, 0));
        
        for(int i=n-1; i>=0; i--) {
            for(int j=0; j<=1; j++) {
                if(j) {
                    int buying = -prices[i] + dp[i+1][false];
                    int notBuying = 0 + dp[i+1][true];

                    dp[i][j] = max(buying, notBuying);
                }
                else {
                    int selling = prices[i] + dp[i+2][true];
                    int notSelling = 0 + dp[i+1][false];

                    dp[i][j] = max(selling, notSelling);
                }
            }
        }
        return dp[0][1];
    }

    int solveSO(vector<int>& prices) {
        int n = prices.size();

        vector<int> afterAfter(n+2, 0);
        vector<int> after(n+2, 0);
        vector<int> curr(n+2, 0);
        
        for(int i=n-1; i>=0; i--) {
            for(int j=0; j<=1; j++) {
                if(j) {
                    int buying = -prices[i] + after[false];
                    int notBuying = 0 + after[true];

                    curr[j] = max(buying, notBuying);
                }
                else {
                    int selling = prices[i] + afterAfter[true];
                    int notSelling = 0 + after[false];

                    curr[j] = max(selling, notSelling);
                }
            }
            afterAfter = after;
            after = curr;
        }
        return after[1];
    }

    int maxProfit(vector<int>& prices) {
        // vector<vector<int>> dp(prices.size(), vector<int>(2, -1));
        // return solve(0, true, prices, dp);

        // return solveTab(prices);

        return solveSO(prices);
    }
    T.C : O(N * 2)
    S.C : O(N)
