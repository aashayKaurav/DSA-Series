//
Given string str, find the length of the longest repeating subsequence such that it can be found twice in the given string.

The two identified subsequences A and B can use the same ith character from string str if and only if that ith character has different indices in A and B. 
For example, A = "xax" and B = "xax" then the index of first "x" must be different in the original string for A and B.

Example 1:

Input:
str = "axxzxy"
Output: 2
Explanation:
The given array with indexes looks like
a x x z x y 
0 1 2 3 4 5

The longest subsequence is "xx". 
It appears twice as explained below.

subsequence A
x x
0 1  <-- index of subsequence A
------
1 2  <-- index of str 


subsequence B
x x
0 1  <-- index of subsequence B
------
2 4  <-- index of str 

We are able to use character 'x' 
(at index 2 in str) in both subsequences
as it appears on index 1 in subsequence A 
and index 0 in subsequence B.
Example 2:

Input:
str = "axxxy"
Output: 2
Explanation:
The given array with indexes looks like
a x x x y 
0 1 2 3 4

The longest subsequence is "xx". 
It appears twice as explained below.

subsequence A
x x
0 1  <-- index of subsequence A
------
1 2  <-- index of str 

subsequence B
x x
0 1  <-- index of subsequence B
------
2 3  <-- index of str 

We are able to use character 'x' 
(at index 2 in str) in both subsequences
as it appears on index 1 in subsequence A 
and index 0 in subsequence B.
//

    ** Idea : Exact same concept as LCS with slide modification that if s1[i] == s1[j] then i != j.
    int solve(string str, int i, int j, vector<vector<int>> &dp){
	       if(i >= str.length() || j >= str.length())
	           return 0;
	       
	       if(dp[i][j] != -1)
	           return dp[i][j];
	           
	       int ans=0;
	       if(str[i] == str[j] && i != j)
	           ans = 1 + solve(str, i+1, j+1, dp);
	       else{
	           ans = max(solve(str, i+1, j, dp), solve(str, i, j+1, dp));
	       }
	       return dp[i][j] = ans;
	    }
	    
	    int solveTab(string str, int n){
	        vector<vector<int>> dp(n+1, vector<int>(n+1, 0));
	        for(int i=n-1; i>=0; i--){
	            for(int j=n-1; j>=0; j--){
	               if(str[i] == str[j] && i != j)
	                   dp[i][j] = 1 + dp[i+1][j+1];
                   else{
                       dp[i][j] = max(dp[i+1][j], dp[i][j+1]);
                   }
	            }
	        }
	        return dp[0][0];
	    }
	    
		int LongestRepeatingSubsequence(string str){
		    // Code here
		    int n = str.length();
		  //  vector<vector<int>> dp(n, vector<int>(n, -1));
		  //  return solve(str, 0, 0, dp);
		  return solveTab(str, n);
		}
    T.C : O(N^2)
    S.C : O(N^2)
