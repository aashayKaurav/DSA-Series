//
Given an array of n positive integers. Find the sum of the maximum sum subsequence of the given array such that the integers in the subsequence are sorted in 
strictly increasing order i.e. a strictly increasing subsequence. 

Example 1:

Input: N = 5, arr[] = {1, 101, 2, 3, 100} 
Output: 106
Explanation:The maximum sum of a
increasing sequence is obtained from
{1, 2, 3, 100}
Example 2:

Input: N = 3, arr[] = {1, 2, 3}
Output: 6
Explanation:The maximum sum of a
increasing sequence is obtained from
{1, 2, 3}
//

    int solve(int arr[], int curr, int prev, int n, vector<vector<int>> &dp){
  	    if(curr >= n)
  	        return 0;
  	        
  	    if(dp[curr][prev+1] != -1)
  	        return dp[curr][prev+1];
  	    
  	    int include = 0;
  	    if(prev == -1 || arr[curr] > arr[prev]){
  	        include = arr[curr] + solve(arr, curr+1, curr, n, dp);
  	    }
  	    
  	    int exclude = 0 + solve(arr, curr+1, prev, n, dp);
  	    
  	    return dp[curr][prev+1] = max(include, exclude);
  	}
  
      int solveTab(int arr[], int n){
          vector<vector<int>> dp(n+1, vector<int>(n+1, 0));
          for(int i = n-1; i>=0; i--){
              for(int j=i-1; j>=-1; j--){
                  int include = 0;
                  if(j == -1 || arr[i] > arr[j]){
                      include = arr[i] + dp[i+1][i+1];
                  }
                  int exclude = 0 + dp[i+1][j+1];
                  
                  dp[i][j+1] = max(include, exclude);
              }
          }
          return dp[0][0];
      }
  	
  	int maxSumIS(int arr[], int n)  
  	{
  	   // vector<vector<int>> dp(n+1, vector<int>(n+1, -1));
  	   // return solve(arr, 0, -1, n, dp);
  	   return solveTab(arr, n);
  	}
