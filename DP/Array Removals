//
Given an array arr[] of size N and an integer K. The task is to find the minimum number of elements that should be removed, such that Amax-Amin<=K. 
After the removal of elements, Amax and Amin is considered among the remaining elements.

Example 1:

Input: N = 9, K = 4  
arr[] = {1,3,4,9,10,11,12,17,20}
Output: 5
Explanation: Remove 1, 3, 4 from beginning
and 17, 20 from the end.
//

    **Approach : Let's first sort the array. Take two iterators i(min) and j(max) and try to make all possibilities of removing elements inorder to get the 
    difference <= k by one time removing i(min) and one time j(max). Later we can apply DP since there are overlapping sub-problems also.
    
    int solve(vector<int>& arr, vector<vector<int>> &dp, int i, int j, int k, int ans){
        if(arr[j] - arr[i] <= k){
            return 0;
        }
        if(i >= j){
            return 0;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        ans = 1 + min(solve(arr, dp, i+1, j, k, ans), solve(arr, dp, i, j-1, k, ans));
        
        return dp[i][j] = ans;
    }
    
    int removals(vector<int>& arr, int k){
        
        sort(arr.begin(), arr.end());
        int n = arr.size();
        vector<vector<int>> dp(n+1, vector<int>(n+1, -1));
        
        return solve(arr, dp, 0, arr.size()-1, k, 0);
    }
    T.C : O(N * logN)
    S.C : O(N^2)
