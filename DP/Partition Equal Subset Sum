//
Given an array arr[] of size N, check if it can be partitioned into two parts such that the sum of elements in both parts is the same.

Example 1:

Input: N = 4
arr = {1, 5, 11, 5}
Output: YES
Explanation: 
The two parts are {1, 5, 5} and {11}.
Example 2:

Input: N = 3
arr = {1, 3, 5}
Output: NO
Explanation: This array can never be 
partitioned into two such parts.
//

    ** Approach : Divide the total sum and check if even or not. If not then return 0 else apply Subset sum equal problem idea to solve for totalSum/2.
    bool solve(int i, int n, int sum, int target, int arr[], vector<vector<int>> &dp){
        if(sum == target){
            return true;
        }
        if(i >= n){
            return false;
        }
        if(dp[i][sum] != -1){
            return dp[i][sum];
        }
        
        // included
        bool inc = solve(i+1, n, sum + arr[i], target, arr, dp);
        // not included
        bool exc = solve(i+1, n, sum, target, arr, dp);
        
        return dp[i][sum] = inc | exc;
    }

    int equalPartition(int N, int arr[])
    {
        int totalSum = 0;
        
        for(int i=0; i<N; i++){
            totalSum += arr[i];
        }
        if(totalSum%2 != 0){
            return 0;
        }
        vector<vector<int>> dp(N+1, vector<int>(totalSum, -1));
        return solve(0, N, 0, totalSum/2, arr, dp);
    }
    T.C : O(N*Sum)
    S.C : O(N*Sum)
