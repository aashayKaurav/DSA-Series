//
Given an array of distinct integers nums and a target integer target, return the number of possible combinations 
that add up to target.

The test cases are generated so that the answer can fit in a 32-bit integer.

Example 1:

Input: nums = [1,2,3], target = 4
Output: 7
Explanation:
The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)
Note that different sequences are counted as different combinations.
Example 2:

Input: nums = [9], target = 3
Output: 0
//

    ** Approach : We will use the same technique i.e take and not take but the inly difference is that even after 
    including the element we will have to start from first.

    int solve(vector<int> &nums, int idx, int target, vector<vector<int>> &dp) {
        if(idx >= nums.size() || target < 0) {
            return 0;
        }
        if(target == 0) {
            return 1;
        }
        if(dp[idx][target] != -1) {
            return dp[idx][target];
        }
        int include = solve(nums, 0, target-nums[idx], dp);

        int exclude = solve(nums, idx+1, target, dp);

        return dp[idx][target] = include + exclude;
    }

    int combinationSum4(vector<int>& nums, int target) {
        int n = nums.size();
        vector<vector<int>> dp(n+1, vector<int>(target+1, -1));
        return solve(nums, 0, target, dp);
    }
    T.C : O(N * Target)
    S.C : O(N * Target)
