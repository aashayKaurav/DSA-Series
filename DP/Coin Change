//
Given an integer array coins[ ] of size N representing different denominations of currency and an integer sum, find the number of ways you can make sum by using 
different combinations from coins[ ].  
Note: Assume that you have an infinite supply of each type of coin. 

Example 1:

Input:
sum = 4 , 
N = 3
coins[] = {1,2,3}
Output: 4
Explanation: Four Possible ways are:
{1,1,1,1},{1,1,2},{2,2},{1,3}.
Example 2:

Input:
Sum = 10 , 
N = 4
coins[] ={2,5,3,6}
Output: 5
Explanation: Five Possible ways are:
{2,2,2,2,2}, {2,2,3,3}, {2,2,6}, {2,3,5} 
and {5,5}.
//

    long long int solve(int coins[], int n, int sum, 
    vector<vector<long long int>> &dp) {
        if(n == 0) {
            return (sum%coins[0] == 0);
        }
        if(dp[n][sum] != -1) {
            return dp[n][sum];
        }
        // not take
        long long int notTake = solve(coins, n-1, sum, dp);
        // take
        long long int take = 0;
        if(coins[n] <= sum)
            take = solve(coins, n, sum-coins[n], dp);
        
        return dp[n][sum] = take + notTake;
    }
    
    long long int solveTab(int coins[], int N, int sum) {
        vector<vector<long long int>> dp(N+1, vector<long long int>(sum+1, 0));
        
        for(int i=0; i<=sum; i++) {
            dp[0][i] = (i%coins[0] == 0);
        }
        for(int ind=1; ind<N; ind++) {
            for(int s=0; s<=sum; s++) {
                // not take
                long long int notTake = dp[ind-1][s];
                // take
                long long int take = 0;
                if(coins[ind] <= s)
                    take = dp[ind][s-coins[ind]];
                
                dp[ind][s] = take + notTake;
            }
        }
        return dp[N-1][sum];
    }
    
    long long int optimized(int coins[], int N, int sum) {
        vector<long long int> prev(sum+1, 0);
        vector<long long int> curr(sum+1, 0);
        
        for(int i=0; i<=sum; i++) {
            prev[i] = (i%coins[0] == 0);
        }
        for(int ind=1; ind<N; ind++) {
            for(int s=0; s<=sum; s++) {
                // not take
                long long int notTake = prev[s];
                // take
                long long int take = 0;
                if(coins[ind] <= s)
                    take = curr[s-coins[ind]];
                
                curr[s] = take + notTake;
            }
            prev = curr;
        }
        return prev[sum];
    }
    
    long long int count(int coins[], int N, int sum) {
        // vector<vector<long long int>> dp(N+1, vector<long long int>(sum+1, -1));
        // return solve(coins, N-1, sum, dp);
        
        // return solveTab(coins, N, sum);
        return optimized(coins, N, sum);
    }
