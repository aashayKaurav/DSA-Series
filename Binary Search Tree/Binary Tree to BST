//
Given a Binary Tree, convert it to Binary Search Tree in such a way that keeps the original structure of Binary Tree intact.

Example 1:

Input:
      1
    /   \
   2     3
Output: 1 2 3

Example 2:

Input:
          1
       /    \
     2       3
   /        
 4       
Output: 1 2 3 4
Explanation:
The converted BST will be

        3
      /   \
    2     4
  /
 1
//

    ** Approach : First store the traversal of the tree into a vector. Sort the vector to get the inorder traversal of the BST. Finally do the inorder traversal of the
    tree and keep updating each node's value.
    
    void solve(Node* root, vector<int> &v, int &i){
        if(root == NULL){
            return;
        }
        solve(root->left, v, i);
        root->data = v[i++];
        solve(root->right, v, i);
    }
  
    void inorder(Node* root, vector<int> &v){
        if(root == NULL){
            return;
        }
        inorder(root->left, v);
        v.push_back(root->data);
        inorder(root->right, v);
    }
    
    Node *binaryTreeToBST (Node *root)
    {
        //Your code goes here
        vector<int> v;
        inorder(root, v);
        sort(v.begin(), v.end());
        int i = 0;
        solve(root, v, i);
        return root;
    }
    T.C : O(NLogN)
    S.C : O(N)
