//
Given an array arr[] of N integers and replace every element with the least greater element on its right side in the array. 
If there are no greater elements on the right side, replace it with -1. 

Example 1:

Input:
arr[] = {8, 58, 71, 18, 31, 32, 63, 92, 43, 3, 91, 93, 25, 80, 28}
Output: {18, 63, 80, 25, 32, 43, 80, 93, 80, 25, 93, -1, 28, -1, -1}
Explanation: 
The least next greater element of 8 is 18.
The least next greater element of 58 is 63 and so on.

Example 2:

Input:
arr[] = {2, 6, 9, 1, 3, 2}
Output: {3, 9, -1, 2, -1, -1}
Explanation: 
The least next greater element of 2 is 3. 
The least next greater element of 6 is 9.
least next greater element for 9 does not
exist and so on.
//

    ** Approach : We use BST property to solve this problem. if we try to build BST from left to right and if we find inorder successor for each element then 
    the constraint that "least greater in right side" won't be satisfied. Therefore we will build BST from right to left and find the inorder successor for
    each element.
    
    class Node {
      public :
          int data;
          Node* left;
          Node* right;
          Node(int data) {
              this->data = data;
              this->left = NULL;
              this->right = NULL;
          }
  };

  class Solution{
      public:

      Node *createBST(Node* root, int val, int &suc) {
          if(root == NULL){
              return new Node(val);
          }

          if(val >= root->data) {
              root->right = createBST(root->right, val, suc);
          }
          else {
              suc = root->data;
              root->left = createBST(root->left, val, suc);
          }
          return root;
      }

      void replace(vector<int>& arr, vector<int>& ans, int n) {
          Node* root = NULL;
          for(int i=n-1; i>=0; i--) {
              int suc = -1;
              root = createBST(root, arr[i], suc);

              ans[i]= suc;
          }
      }

      vector<int> findLeastGreater(vector<int>& arr, int n) {
          vector<int> ans(n);
          replace(arr, ans, n);
          return ans;
      }
  };
  T.C : O(N^2)
  S.C : O(H)
----------------------------------------------------------------------------------------------------
      ** Approach : Use set to store elements from right to left keep using upper_bound for every element and if valid element found then push_back to ans.
      
      vector<int> findLeastGreater(vector<int>& arr, int n) {
        
        set<int>st;
        vector<int>vec;
        for(int i=n-1;i>=0;i--){
            
            auto itr=st.upper_bound(arr[i]);
            if(itr==st.end())
                vec.push_back(-1);
            else
                vec.push_back(*itr);
                
                
            st.insert(arr[i]);
        }
        reverse(vec.begin(),vec.end());
        return vec;
    }
      T.C : Theta(N * LogN)
      S.C : O(N)
