//
Given a Binary Search Tree, modify the given BST such that it is balanced and has minimum possible height.

Examples :

Input:
       30
      /
     20
    /
   10
Output:
     20
   /   \
 10     30

Input:
         4
        /
       3
      /
     2
    /
   1
Output:
      3            3           2
    /  \         /  \        /  \
   1    4   OR  2    4  OR  1    3   OR ..
    \          /                   \
     2        1                     4 
//

      ** Approach : An efficient solution can be like forst get the inorder traversal of the nodes, and from that array we will build the tree recursively.
      the root will point to the mid node of the array and similarly call for left and right part.
      
      void inorder(Node* root, vector<Node*> &nodes) {
        if(root == NULL)
            return;

        inorder(root->left, nodes);
        nodes.push_back(root);
        inorder(root->right, nodes);
      }

      Node* buildTree(vector<Node*> &nodes, int left, int right) {

          if(left > right){
              return NULL;
          }
          int mid = ((left+right)>>1);
          Node* root = nodes[mid];
          root->left = buildTree(nodes, left, mid-1);
          root->right = buildTree(nodes, mid+1, right);

          return root;
      }

      // Your are required to complete this function
      // function should return root of the modified BST
      Node* buildBalancedTree(Node* root)
      {
        // 1. Find the inorder traversal of the tree.
        // 2. Then recursively build the height balalnced BST.
        vector<Node*> nodes;
        inorder(root, nodes);
        return buildTree(nodes, 0, nodes.size()-1);
      }
      T.C : O(N) : since each node is visited only once.
      S.C : O(1)
