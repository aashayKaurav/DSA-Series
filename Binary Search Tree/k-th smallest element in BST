//
Given a BST and an integer K. Find the Kth Smallest element in the BST using O(1) extra space. 

Example 1:

Input:
      2
    /   \
   1     3
K = 2
Output: 2
Explanation: 2 is the 2nd smallest element in the BST

Example 2:

Input:
        2
      /  \
     1    3
K = 5
Output: -1
Explanation: There is no 5th smallest element in the BST as the size of BST is 3
//

    ** Approach : Recursively traverse to left subtree. Then keep decrementing k value and check if k== 0 then store into ans else go to right subtree.
    void solve(Node* root, int &ans, int &k) {
        if(root == NULL) {
            return;
        }
        solve(root->left, ans, k);
        k--;
        if(k == 0) {
            ans = root->data;
        }
        solve(root->right, ans, k);
    }
  
    // Return the Kth smallest element in the given BST
    int KthSmallestElement(Node *root, int K) {
        if(root == NULL) {
            return -1;
        }
        
        int ans = -1;
        solve(root, ans, K);
        return ans;
    }
    T.C : O(N)
    S.C : O(N)
--------------------------------------------------------------------------------
    ** Optimal Approach : Use Morris Traversal :)
    int KthSmallestElement(Node *root, int K) {
        if(root == NULL) {
            return -1;
        }
        int ans = -1;
        Node* curr = root;
        while(curr) {
            
            if(curr->left == NULL) {
                K--;
                if(K == 0) {
                    ans = curr->data;
                    return ans;
                }
                curr = curr->right;
            }
            else {
                
                Node* pred = curr->left;
                while(pred->right != NULL && pred->right != curr) {
                    pred = pred->right;
                }
                if(pred->right == curr) {
                    K--;
                    if(K == 0) {
                        ans = curr->data;
                        return ans;
                    }
                    pred->right = NULL;
                    curr = curr->right;
                }
                else{
                    
                    pred->right = curr;
                    curr = curr->left;
                    
                }
            }
        }
        return ans;
    }
    T.C : O(N)
    S.C : O(1)
