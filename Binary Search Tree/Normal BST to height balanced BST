//
Given a Binary Search Tree, modify the given BST such that it is balanced and has minimum possible height.

Examples :

Input:
       30
      /
     20
    /
   10
Output:
     20
   /   \
 10     30

Input:
         4
        /
       3
      /
     2
    /
   1
Output:
      3            3           2
    /  \         /  \        /  \
   1    4   OR  2    4  OR  1    3   OR ..
    \          /                   \
     2        1                     4
//

    ** Approach : a) First get the inorder traversal of the tree and store into a vector.
                  b) Then Using divide and conquer method modify the tree to height balanced tree.
                  
       void inorder(Node* root, vector<Node*> &nodes) {
        if(root == NULL)
            return;

        inorder(root->left, nodes);
        nodes.push_back(root);
        inorder(root->right, nodes);
    }

    Node* buildTree(vector<Node*> &nodes, int left, int right) {

        if(left > right){
            return NULL;
        }
        int mid = ((left+right)>>1);
        Node* root = nodes[mid];
        root->left = buildTree(nodes, left, mid-1);
        root->right = buildTree(nodes, mid+1, right);

        return root;
    }

    Node* buildBalancedTree(Node* root)
    {
      // 1. Find the inorder traversal of the tree.
      // 2. Then recursively build the height balalnced BST.
      vector<Node*> nodes;
      inorder(root, nodes);
      return buildTree(nodes, 0, nodes.size()-1);
    }
    T.C : O(N)
    S.C : O(N)
