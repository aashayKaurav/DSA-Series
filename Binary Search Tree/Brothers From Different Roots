//
Given two BSTs containing N1 and N2 distinct nodes respectively and given a value x. Your task is to complete the function countPairs(), 
that returns the count of all pairs from both the BSTs whose sum is equal to x.

Example 1:

Input:
BST1:
       5
     /   \
    3     7
   / \   / \
  2   4 6   8

BST2:
       10
     /    \
    6      15
   / \    /  \
  3   8  11   18

x = 16
Output:
3
Explanation:
The pairs are: (5, 11), (6, 10) and (8, 8)
 
Example 2:

Input:
BST1:
  1
   \
    3
   /
  2
BST2:
    3
   / \
  2   4
 /     
1

x = 4
Output:
3
Explanation:
The pairs are: (2, 2), (3, 1) and (1, 3)
//

    ** Approach : We can map the elements of 2nd BST then compare (x-root1->data) exists in the map or not. If exists then increase the count and finally return count.
    
    void preorder(Node* root, unordered_map<int, int> &mp, int &cnt, int x) {
        if(root == NULL) {
            return ;
        }
        if(mp.find(x-root->data) != mp.end()) {
            cnt++;
        }
        preorder(root->left, mp, cnt, x);
        preorder(root->right, mp, cnt, x);
    }

    void inorder(Node* root, unordered_map<int, int> &mp) {
        if(root == NULL) {
            return;
        }
        inorder(root->left, mp);
        mp[root->data] = 1;
        inorder(root->right, mp);
    }
    
    int countPairs(Node* root1, Node* root2, int x)
    {
        if(root1 == NULL || root2 == NULL){
            return 0;
        }
        int count = 0;
        unordered_map<int, int> mp;
        inorder(root2, mp);
        
        preorder(root1, mp, count, x);
        
        return count;
    }
    T.C : O(N + M)
    S.C : O(M)
