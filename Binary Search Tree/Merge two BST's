//
You are given two balanced BST's having N and M nodes. You have to merge two BST's into a balanced BST and return it's root.
//

    ** Approach : The idea is simple try to get inorder traversal of both the BST's and merge the two sorted list into single. Finally do the divide/conquer technique
    and build the balanced tree.
    
    TreeNode<int>* solve(vector<int> &v, int si, int ei){
        if(si>ei){
            return NULL;
        }
        int mid = si + (ei-si)/2;
        TreeNode<int>* root = new TreeNode<int>(v[mid]);
        root->left = solve(v, si, mid-1);
        root->right = solve(v, mid+1, ei);

        return root;
    }

    void mergeList(vector<int> &v1, vector<int> &v2, vector<int> &ans){
        int i=0, j=0;
        while(i<v1.size() && j<v2.size()){
            if(v1[i] < v2[j]){
                ans.push_back(v1[i]);
                i++;
            }
            else{
                ans.push_back(v2[j]);
                j++;
            }
        }
        while(i<v1.size()){
            ans.push_back(v1[i]);
            i++;
        }
        while(j<v2.size()){
            ans.push_back(v2[j]);
            j++;
        }
    }

    void inorder(TreeNode<int> *root, vector<int> &vec){
        if(root == NULL){
            return;
        }
        inorder(root->left, vec);
        vec.push_back(root->data);
        inorder(root->right, vec);
    }

    TreeNode<int> *mergeBST(TreeNode<int> *root1, TreeNode<int> *root2){
        // Write your code here.
        vector<int> v1;
        vector<int> v2;
        vector<int> ans;
        inorder(root1, v1);
        inorder(root2, v2);
        mergeList(v1, v2, ans);
        return solve(ans, 0, ans.size()-1);
    }
    T.C : O(N)
    S.C : O(N)
