//
Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.
 
Example 1:

Input: root = [5,3,6,2,4,null,7], key = 3
Output: [5,4,6,2,null,null,7]
Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.
One valid answer is [5,4,6,2,null,null,7], shown in the above BST.
Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.

Example 2:

Input: root = [5,3,6,2,4,null,7], key = 0
Output: [5,3,6,2,4,null,7]
Explanation: The tree does not contain a node with value = 0.
Example 3:

Input: root = [], key = 0
Output: []
//

    ** Approach : Inorder to delete a node from a BST we need to maintain its property. So for that we have 3 cases --
        a) node is a leaf node : Simply delete the node and return NULL
        b) Node has 1 child : delete this node and return its child pointer
        c) node has 2 childs : we can replace the root with its inorder predecessor or successor and call delete function for that value.
        
        /**
         * Definition for a binary tree node.
         * struct TreeNode {
         *     int val;
         *     TreeNode *left;
         *     TreeNode *right;
         *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
         *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
         *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
         * };
         */
        class Solution {
        public:

            int inorderSuccessor(TreeNode* root) {
                TreeNode* temp = root->right;
                while(temp->left != NULL) {
                    temp = temp->left;
                }
                return temp->val;
            }

            TreeNode* deleteNode(TreeNode* root, int key) {
                // If node not found.
                if(root == NULL)
                    return NULL;

                // If node found
                if(root->val == key) {
                    // if leaf node.
                    if(root->left == NULL && root->right == NULL) {
                        delete root;
                        return NULL;
                    }
                    // node having 1 child.
                    if(root->left == NULL && root->right != NULL) {
                        TreeNode* temp = root->right;
                        delete root;
                        return temp;
                    }
                    else if(!root->right && root->left != NULL){
                        TreeNode* temp = root->left;
                        delete root;
                        return temp;
                    }
                    // node having 2 child then replacing with inorderSuccessor.
                    else{
                        int data = inorderSuccessor(root);
                        root->val = data;
                        root->right = deleteNode(root->right, data);
                    }
                }
                else if(root->val < key) {
                    root->right = deleteNode(root->right, key);    
                }
                else {
                    root->left = deleteNode(root->left, key);
                }
                return root;
            }
        };
        T.C : O(N)
        S.C : O(1)
