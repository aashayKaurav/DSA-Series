//
Given a Binary Search Tree of size N, find the Median of its Node values.

Example 1:

Input:
       6
     /   \
   3      8   
 /  \    /  \
1    4  7    9
Output: 6
Explanation: Inorder of Given BST will be:
1, 3, 4, 6, 7, 8, 9. So, here median will 6.

Example 2:

Input:
       6
     /   \
   3      8   
 /   \    /   
1    4   7   
Output: 5
Explanation:Inorder of Given BST will be:
1, 3, 4, 6, 7, 8. So, here median will
(4 + 6)/2 = 10/2 = 5.
//

    ** Brute Approach : Take an additional ds to store all the elements in inoder, then if n is even return sum of middle 2 else return middle.
    
    void inorder(Node* root, vector<int> &ans) {
        if(root == NULL) {
            return;
        }
        inorder(root->left, ans);
        ans.push_back(root->data);
        inorder(root->right, ans);
    }


    float findMedian(struct Node *root)
    {
        if(root == NULL) {
            return 0.0;
        }
        vector<int> ans;

        inorder(root, ans);

        int n = ans.size();
        if(n&1) {
            return ans[n/2];
        }
        float res = (ans[n/2-1] + ans[n/2])/2.0;
        return res;
    }
    T.C : O(N)
    S.C : O(N)
 --------------------------------------------------------------------------------
    ** Optimal Approach : Using Morris Traversal
    
    void morrisTraversal(Node* root, int &count) {
    
        Node* curr = root;

        while(curr) {

            if(curr->left == NULL) {
                count++;
                curr = curr->right;
            }
            else {

                Node* predecessor = curr->left;
                while(predecessor->right != NULL && predecessor->right != curr) {
                    predecessor = predecessor->right;
                }
                if(predecessor->right == NULL) {
                    predecessor->right = curr;
                    curr = curr->left;
                } else {
                    predecessor->right = NULL;
                    count++;
                    curr = curr->right;
                }
            }
        }
    }

    float findMedian(struct Node *root)
    {
        if(root == NULL) {
            return 0;
        }
        int count = 0;
        morrisTraversal(root, count);
        int currCount = 0;
        Node* curr = root, *prev;
        float ans = 0;
        while(curr) {

            if(curr->left == NULL) {
                currCount++;
                if(count%2 != 0 && currCount == (count+1)/2) {
                    ans = curr->data;
                }
                else if(count%2 == 0 && currCount == (count/2 + 1)) {
                    ans = (prev->data + curr->data)/2.0;
                }
                prev = curr;
                curr = curr->right;
            }
            else{
                Node* predecessor = curr->left;
                while(predecessor->right != NULL && predecessor->right != curr) {
                    predecessor = predecessor->right;
                }

                if(predecessor->right == NULL) {
                    predecessor->right = curr;
                    curr = curr->left;
                }
                else{
                    predecessor->right = NULL;
                    currCount++;
                    if(count%2 != 0 && currCount == (count+1)/2) {
                        ans = curr->data;
                    }
                    else if(count%2 == 0 && currCount == (count/2 + 1)) {
                        ans = (prev->data + curr->data)/2.0;
                    }

                    prev = curr;
                    curr = curr->right;
                }
            }
        }
        return ans;
    }
    T.C : O(N)
    S.C : O(1)



