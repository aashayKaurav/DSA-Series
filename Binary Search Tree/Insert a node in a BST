//
Given a BST and a key K. If K is not present in the BST, Insert a new Node with a value equal to K into the BST. 
Note: If K is already present in the BST, don't modify the BST.


Example 1:

Input:
     2
   /   \
  1     3
K = 4
Output: 1 2 3 4
Explanation: After inserting the node 4
Inorder traversal will be 1 2 3 4.
Example 2:

Input:
        2
      /   \
     1     3
             \
              6
K = 4
Output: 1 2 3 4 6
Explanation: After inserting the node 4
Inorder traversal of the above tree
will be 1 2 3 4 6.
//

    ** Approach : Recursively call the function untill we find the correct position of the node to create. Finally return the modified BST if node not found.
    
    Node* insert(Node* root, int Key) {
      if(root == NULL){
          Node* newNode = new Node(Key);
          return newNode;
      }
      if(root->data == Key)
          return root;

      if(root->data < Key) {
          root->right = insert(root->right, Key);
      }
      else{
          root->left = insert(root->left, Key);
      }
      return root;
    }
    T.C : O(N)
    S.C : O(1)
