//
Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.

It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.

A binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, 
and any descendant of Node.right has a value strictly greater than Node.val.

A preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.

Example 1:

Input: preorder = [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]
Example 2:

Input: preorder = [1,3]
Output: [1,null,3]
//

    ** Brute Approach : we can use the same approach (no BST property) to construct BST from inorder and preorder traversal. Recursively calling the functions for
    left subtree and right subtree. [Without map]
    T.C : O(N^2)
    S.C : O(N)  // vector for inorder and sort it.
    
    Better Approach : same as above but with map
    TreeNode* solve(vector<int>& preorder, unordered_map<int,int> &mp, int &index, int left, int right) {
        if(index >= preorder.size()) {
            return NULL;
        }
        if(left > right) {
            return NULL;
        }

        TreeNode* root = new TreeNode(preorder[index]);
        int inorderIndex = mp[preorder[index]];
        index++;

        root->left = solve(preorder, mp, index, left, inorderIndex-1);
        root->right = solve(preorder, mp, index, inorderIndex+1, right);

        return root;
    }

    TreeNode* bstFromPreorder(vector<int>& preorder) {
        
        int n = preorder.size();
        vector<int> inorder(n);
        
        for(int i=0; i<n; i++) {
            inorder[i] = preorder[i];
        }

        sort(inorder.begin(), inorder.end());
        
        unordered_map<int, int> mp;

        for(int i=0; i<n; i++) {
            mp[inorder[i]] = i;
        }

        int index = 0;
        return solve(preorder, mp, index, 0, n-1);

    }
    T.C : O(NlogN)
    S.C : O(N)  // vector for inorder and sort it.
    ------------------------------------------------------------------------------------------------------
    Optimal Approach : We can you minBound and maxBound concept. But actually we dont need minBound also as from a particular node for left subtree (node->val) is the
    maxBound, and for right subtree (same node's upper bound) is the maxBound.
    
    TreeNode* builder(vector<int> &preorder, int &index, int bound) {
        if(index >= preorder.size() || preorder[index] > bound) {
            return NULL;
        }
        TreeNode *root = new TreeNode(preorder[index++]);

        root->left = builder(preorder, index, root->val);
        root->right = builder(preorder, index, bound);

        return root;
    }

    TreeNode* bstFromPreorder(vector<int>& preorder) {
        int index = 0;
        return builder(preorder, index, INT_MAX);
    }
    T.C : O(N)
    S.C : O(1)
