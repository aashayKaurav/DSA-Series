//
Given two Lists of strings s1 and s2, you have to count the number of strings in s2 which is either a suffix or prefix of at least one string of s1.

Example 1:

Input:
s1 = ["cat", "catanddog", "lion"]
s2 = ["cat", "dog", "rat"]
Output: 
2
Explanation: 
String "cat" of s2 is prefix of "catanddog"
& string "dog" of s2 is suffix of "catanddog" 
Example 2:

Input: 
s1 = ["jrjiml", "tchetn", "ucrhye", "ynayhy", 
       "cuhffd", "cvgpoiu", "znyadv"]
s2 = ["jr", "ml", "cvgpoi", "gpoiu", "wnmkmluc", 
      "geheqe", "uglxagyl", "uyxdroj"] 
Output: 
4
Explanation: 
String "jr" of s2 is prefix of "jrjiml", 
"ml" of s2 is suffix of "jrjiml", 
"cvgpoi" of s2 is prefix of "cvgpoiu" &
"gpoiu" of s2 is suffix of "cvgpoiu"
//

    ** Approach : Since we need to search for prefix and suffix strings of S1, then it's better to store them in a DS which can search efficiently so using Trie ds.
    We will first store all string (reverse strings also) of S1 into trie. Then search each string of S2 (also reverse string) if found increment the counter else 
    don't increment.
    
    class TrieNode {
    public:
        TrieNode* children[26];
    };

    TrieNode* getNode() {
        TrieNode* root = new TrieNode();
        for(int i=0; i<26; i++) {
            root->children[i] = NULL;
        }
        return root;
    }

    void insert(TrieNode* root, string str) {
        TrieNode* pCrawl = root;
        for(int i=0; i<str.size(); i++) {
            int index = str[i] - 'a';
            if(!pCrawl->children[index]) {
                pCrawl->children[index] = getNode();
            }
            pCrawl = pCrawl->children[index];
        }
    }

    bool search(TrieNode* root, string str) {
        TrieNode* pCrawl = root;
        for(int i=0; i<str.size(); i++) {
            int index = str[i] - 'a';
            if(!pCrawl->children[index]){
                return false;
            }
            pCrawl = pCrawl->children[index];
        }
        return true;
    }

    class Solution{
    public:
        int prefixSuffixString(vector<string> &s1,vector<string> s2){
            TrieNode* root = getNode();
            for(auto str : s1) {
                insert(root, str);
                reverse(str.begin(), str.end());
                insert(root, str);
            }
            int ans = 0;
            for(auto str : s2) {
                string rev = str;
                reverse(rev.begin(), rev.end());
                if(search(root, str) || search(root, rev)) {
                    ans++;
                }
            }
            return ans;
        }
    };
    T.C : O(max(len(s1), len(s2)))
    S.C : O(1)
