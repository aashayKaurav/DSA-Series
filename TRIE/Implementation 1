//
**Every node of Trie consists of multiple branches. Each branch represents a possible character of keys.**
**Basic operations are: Insert, Search and startsWith**
//

    #include <bits/stdc++.h>

    using namespace std;
    
    class TrieNode {
        public:
            TrieNode *children[26];
            bool isEndOfWord;
            
            TrieNode() {
                for(int i=0; i<26; i++) {
                    this->children[i] = NULL;
                }
                isEndOfWord = false;
            }
    };
    
    class Trie {
        public :
            TrieNode *root;
            
            Trie() {
                root = new TrieNode();
            }
            
            void insert(string word) {
                TrieNode *current = root;
                
                for(char c : word) {
                    int index = c - 'a';
                    if(current->children[index] == NULL) {
                        current->children[index] = new TrieNode();
                    }
                    current = current->children[index];
                }
                current->isEndOfWord = true;
            }
            
            bool search(string word) {
                TrieNode *current = root;
                
                for(char c : word) {
                    int index = c - 'a';
                    if(current->children[index] == NULL) {
                        return false;
                    }
                    current = current->children[index];
                }
                if(current->isEndOfWord == true) {
                    return true;
                }
                return false;
            }
            
            bool startsWith(string prefix) {
                TrieNode *current = root;
                
                for(char c : prefix) {
                    int index = c - 'a';
                    if(current->children[index] == NULL) {
                        return false;
                    }
                    current = current->children[index];
                }
                return true;
            }
    };
    
    int main()
    {
        Trie trie;
        trie.insert("apple");
        trie.insert("banana");
        
        cout << "Search orange : " << trie.search("orange") << endl;
        cout << "Search apple : " << trie.search("apple") << endl;
        cout << "Search prefix (bana) : " << trie.startsWith("bana") << endl;
        return 0;
    }
