//
Given 2 Arrays of Inorder and preorder traversal. The tree can contain duplicate elements. Construct a tree and print the Postorder traversal. 

Example 1:

Input:
N = 4
inorder[] = {1 6 8 7}
preorder[] = {1 6 7 8}
Output: 8 7 6 1
Example 2:

Input:
N = 6
inorder[] = {3 1 4 0 5 2}
preorder[] = {0 1 3 4 2 5}
Output: 3 4 1 5 2 0
Explanation: The tree will look like
       0
    /     \
   1       2
 /   \    /
3    4   5
//

    ** Approach : We will be keep dividing our search on inorder i.e. after getting the position of the element, we will call the recursive function for left subtree
    and right subtree. We can also use unordered map ds to store the index values of inorder array but here elements can be repeated so therefore not using map.
    
    int findposition(int in[],int element,int start,int end)
    {
        for(int i=start;i<=end;i++)
        {
            if(in[i]==element)
            return i;
        }
        return -1;
    }
    
    Node* solve(int in[], int pre[], int &index, int si, int ei, int n)
    {
        if(index >= n || si > ei){
            return NULL;
        }
        
        int element = pre[index++];
        Node* root = new Node(element);
        int position = findposition(in, element, si, ei);
        
        root->left = solve(in, pre, index, si, position-1, n);
        root->right = solve(in, pre, index, position+1, ei, n);
        
        return root;
    }
    
    Node* buildTree(int in[],int pre[], int n)
    {
        // Code here
        int preorderindex=0;
        Node* ans = solve(in, pre, preorderindex, 0, n-1, n);
        return ans;
    }
    T.C : O(N)
    S.C : O(1)
