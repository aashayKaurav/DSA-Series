//
Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.

The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).

Example 1:

Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8
Output: 3
Explanation: The paths that sum to 8 are shown.
//

    **Approach : Similar to Path Sum ll problem but here we will check for not just root but for every node.
    int pathCount = 0;
    void dfs(TreeNode* root, long long targetSum) {
        if(root == nullptr)
            return;
        if(root->val == targetSum){
            pathCount++;
        }
        dfs(root->left, targetSum - root->val);
        dfs(root->right, targetSum - root->val);

        return;
    }

    int pathSum(TreeNode* root, int targetSum) {
        
        if(root== nullptr)
            return pathCount;
        dfs(root, targetSum);
        pathSum(root->left, targetSum);
        pathSum(root->right, targetSum);

        return pathCount;
    }
    T.C : O(N^2) since we have to check paths i.e. n + (n-1) + .... + 1
    S.C : O(1)
