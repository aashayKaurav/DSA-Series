//
Given below is a binary tree. The task is to print the top view of binary tree. Top view of a binary tree is the set of nodes visible when the tree is viewed from the top. 
For the given below tree

       1
    /     \
   2       3
  /  \    /   \
4    5  6   7

Top view will be: 4 2 1 3 7
Note: Return nodes from leftmost node to rightmost node. Also if 2 nodes are outside the shadow of the tree and are at same position then consider the extreme ones only
(i.e. leftmost and rightmost). For ex - 1 2 3 N 4 5 N 6 N 7 N 8 N 9 N N N N N will give 8 2 1 3 as answer. Here 8 and 9 are on the same position but 9 will get shadowed.

Example 1:

Input:
      1
   /    \
  2      3
Output: 2 1 3
Example 2:

Input:
       10
    /      \
  20        30
 /   \    /    \
40   60  90    100
Output: 40 20 10 30 100
//

    ** Approach : We can use the concept of horizontal distance. For moving left side decrease the horizontal distance anf for right increase. Maintain a map that holds 
    the value of [horizontalDistance : node data] and node will be the one which is seen for the first time. Since for same horizontalDistance other nodes will be hidden
    vector<int> topView(Node *root)
    {
        vector<int> ans;
        if(root == NULL) {
            return ans;
        }
        // horizontal distance : node data
        map<int, int> mp;
        // Node wrt to horizontal distance
        queue<pair<Node*, int>> q;
        q.push({root, 0});
        
        while(!q.empty()) {
            Node* curr = q.front().first;
            int horizontalDist = q.front().second;
            q.pop();
            if(mp.find(horizontalDist) == mp.end()) {
                mp[horizontalDist] = curr->data;
            }
            if(curr->left) {
                q.push({curr->left, horizontalDist-1});
            }
            if(curr->right) {
                q.push({curr->right, horizontalDist+1});
            }
        }
        for(auto it : mp) {
            ans.push_back(it.second);
        }
        return ans;
    }
    T.C : O(N)
    S.C : O(N)
