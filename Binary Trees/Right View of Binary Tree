//
Given a Binary Tree, find Right view of it. Right view of a Binary Tree is set of nodes visible when tree is viewed from right side.

Right view of following tree is 1 3 7 8.

          1
       /     \
     2        3
   /   \      /    \
  4     5   6    7
    \
     8

Example 1:

Input:
       1
    /    \
   3      2
Output: 1 2
Example 2:

Input:
     10
    /   \
  20     30
 /   \
40  60 
Output: 10 30 60
//

    void solve(Node* root, int level, vector<int> &ans) {
        if(root == NULL) {
            return;
        }
        
        if(ans.size() == level) {
            ans.push_back(root->data);
        }
        if(root->right) {
            solve(root->right, level+1, ans);
        }
        if(root->left) {
            solve(root->left, level+1, ans);
        }
    }
    //Function to return list containing elements of right view of binary tree.
    vector<int> rightView(Node *root)
    {
        // vector<int> ans;
        // solve(root, 0, ans);
        // return ans;
        if(root == NULL) {
            return {};
        }
        queue<Node*> q;
        q.push(root);
        vector<int> ans;
        while(!q.empty()) {
            int n = q.size();
            for(int i=0; i<n; i++) {
                Node* curr = q.front();
                q.pop();
                if(i == n-1) {
                    ans.push_back(curr->data);
                }
                if(curr->left) {
                    q.push(curr->left);
                }
                if(curr->right) {
                    q.push(curr->right);
                }
            }
        }
        return ans;
    }
    T.C : O(N)
    S.C : O(N)
