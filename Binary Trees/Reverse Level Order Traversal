//
Given a binary tree of size N, find its reverse level order traversal. ie- the traversal must begin from the last level.

Example 1:

Input :
        1
      /   \
     3     2

Output: 3 2 1
Explanation:
Traversing level 1 : 3 2
Traversing level 0 : 1
Example 2:

Input :
       10
      /  \
     20   30
    / \ 
   40  60

Output: 40 60 20 30 10
Explanation:
Traversing level 2 : 40 60
Traversing level 1 : 20 30
Traversing level 0 : 10
//

    ** Approach : We will simply traverse level wise, but instead of pushing left child first then right child. We will first push right child then left child.
    Reason being we have to reverse the ans vector to display from last level to first so if we push right->left it will be left->?right :)
    if(root == NULL) {
        return {};
    }
    vector<int> ans;
    queue<Node*> q;
    q.push(root);
    
    while(!q.empty()) {
        Node* temp = q.front();
        q.pop();
        ans.push_back(temp->data);
        
        // first push right child then left child
        if(temp->right) {
            q.push(temp->right);
        }
        if(temp->left) {
            q.push(temp->left);
        }
    }
    reverse(ans.begin(), ans.end());
    return ans;
    T.C : O(N)
    S.C : O(N)
