//
Given a binary tree of size  N, a node, and a positive integer k., Your task is to complete the function kthAncestor(), the function should return the kth ancestor 
of the given node in the binary tree. If there does not exist any such ancestor then return -1.
Note: It is guaranteed that the node exists in the tree.

Example 1:

Input:
     K = 2
     Node = 4
Output: 1
Explanation:
Since, K is 2 and node is 4, so we
first need to locate the node and
look k times its ancestors.
Here in this Case node 4 has 1 as his
2nd Ancestor aka the Root of the tree.
 
Example 2:

Input:
k=1 
node=3
      1
    /   \
    2     3

Output:
1
Explanation:
K=1 and node=3 ,Kth ancestor of node 3 is 1.
//

    ** Approach : The idea is to traverse in postorder way if we find our node return true and at last step keep checking whether the left subtree or right sub tree
    return true or not if any one return true the keep decrementing k and finally like di=oing so if k == 0 store node->data int ans.
    
    bool findAncestor(Node *root, int &k, int node, int &ans)
    {
        if(root==NULL)
        {
            return false;
        }

        if(root->data==node)
        {
            return true;
        }

        bool leftTree = findAncestor(root->left, k, node, ans);
        bool rightTree = findAncestor(root->right, k, node, ans);

        if(leftTree || rightTree)
        {
            k--;
            if(k==0)
            {
                ans = root->data;
            }
        }
    }
    int kthAncestor(Node *root, int k, int node)
    {
        int ans = -1;
        findAncestor(root, k, node, ans);
        return ans;
    }
    T.C : O(N)
    S.C : O(N)
