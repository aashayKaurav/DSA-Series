//
Construct a binary tree from a string consisting of parenthesis and integers. The whole input represents a binary tree. 
It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the roots value and a pair of parenthesis contains a child binary 
tree with the same structure. Always start to construct the left child node of the parent first if it exists. The integer values will be less than or equal to 10^5.

Example 1:

Input: "1(2)(3)" 
Output: 2 1 3
Explanation:
           1
          / \
         2   3
Explanation: first pair of parenthesis contains 
left subtree and second one contains the right 
subtree. Inorder of above tree is "2 1 3".
Example 2:

Input: "4(2(3)(1))(6(5))"
Output: 3 2 1 4 5 6
Explanation:
           4
         /   \
        2     6
       / \   / 
      3   1 5   
//

    ** Approach : We can construct the tree by recursively calling function for left child and for right child. The only difficulty is to provide the range for left
    and right child from the string. For this purpose we will use stack. For '(' & ')' pass we get our range for left child and for another '(' & ')' we get range for
    right child. Finally return root.
    
    Node* solve(string str, int start, int end) {
        if(start > end){
            return NULL;
        }
        
        int i = start;
        while(i <= end){
            
            if(str[i]-'0' >= 0 && str[i]-'0' <= 9){
                i++;
            }
            else{
                break;
            }
        }
        int node = stoi(str.substr(start, i-start));
        Node* root = new Node(node);
        
        int j = i;
        stack<char> stk;
        while(j <= end){
            
            if(str[j] == ')'){
                stk.pop();
            }
            else if(str[j] == '('){
                stk.push('(');
            }
            if(stk.empty())
                break;
            j++;
        }
        root->left = solve(str, i+1, j-1);
        if(j+2 < end){
            root->right = solve(str, j+2, end-1);
        }
        
        return root;
    }

    // function to construct tree from string
    Node *treeFromString(string str){
        
        if(str == "")
            return NULL;
        
        return solve(str, 0, str.length()-1);
    }
    T.C : O(N)
    S.C : O(N)
