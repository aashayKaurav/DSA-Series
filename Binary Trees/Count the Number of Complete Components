You are given an integer n. There is an undirected graph with n vertices, numbered from 0 to n - 1.
You are given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting vertices ai and bi.

Return the number of complete connected components of the graph.

A connected component is a subgraph of a graph in which there exists a path between any two vertices, and no vertex of the subgraph shares an edge with a vertex outside of the subgraph.

A connected component is said to be complete if there exists an edge between every pair of its vertices.

Example 1:
Input: n = 6, edges = [[0,1],[0,2],[1,2],[3,4]]
Output: 3
Explanation: From the picture above, one can see that all of the components of this graph are complete.

Example 2:
Input: n = 6, edges = [[0,1],[0,2],[1,2],[3,4],[3,5]]
Output: 1
Explanation: The component containing vertices 0, 1, and 2 is complete since there is an edge between every pair of two vertices.
On the other hand, the component containing vertices 3, 4, and 5 is not complete since there is no edge between vertices 4 and 5. Thus, the number of complete components in this graph is 1.

---------------------------------------------------------------------------------------------------------

SOLUTION-1:

class Solution {
public:
    void dfs(int node, vector<vector<int>> &edgeList, vector<int> &isVisited, int componentInfo[2]) {
        isVisited[node] = 1;
        componentInfo[0]++;
        componentInfo[1] += edgeList[node].size();

        for(auto neighbor : edgeList[node]) {
            if(!isVisited[neighbor]) {
                dfs(neighbor, edgeList, isVisited, componentInfo);
            }
        }
    }

    int countCompleteComponents(int n, vector<vector<int>>& edges) {    
        vector<vector<int>> edgeList(n);

        for(int i=0; i<edges.size(); i++) {
            int u = edges[i][0];
            int v = edges[i][1];
            edgeList[u].push_back(v);
            edgeList[v].push_back(u);
        }
        int numberOfComponents = 0;
        vector<int> isVisited(n, 0);

        for(int i=0; i<n; i++) {
            if(!isVisited[i]) {
                int componentInfo[2] = {0, 0}; // vertices count, edges count
                dfs(i, edgeList, isVisited, componentInfo);
                
                // since complete graph : #Edges = n(n-1)/2, but this is undirected graph and we end up counting edges twice hence *2, therefore n*(n-1) only.
                if(componentInfo[0]*(componentInfo[0] - 1) == componentInfo[1]) {
                    numberOfComponents++;
                }
            }
        }

        return numberOfComponents;
    }
};
