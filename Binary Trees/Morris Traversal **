Using Morris Traversal, we can traverse the tree without using stack and recursion. The idea of Morris Traversal is based on Threaded Binary Tree. In this traversal, 
we first create links to Inorder successor and print the data using these links, and finally revert the changes to restore original tree. 


1. Initialize current as root 
2. While current is not NULL
   If the current does not have left child
      a) Print current’s data
      b) Go to the right, i.e., current = current->right
   Else
      a) Find rightmost node in current left subtree OR
              node whose right child == current.
         If we found right child == current
             a) Update the right child as NULL of that node whose right child is current
             b) Print current’s data
             c) Go to the right, i.e. current = current->right
         Else
             a) Make current as the right child of that rightmost 
                node we found; and 
             b) Go to this left child, i.e., current = current->left
             
   ** Code:
   #include <bits/stdc++.h>

    using namespace std;

    struct Node {
        int data;
        struct Node* left;
        struct Node* right;
    };

    struct Node* newNode(int data)
    {
        struct Node* node = new Node;
        node->data = data;
        node->left = NULL;
        node->right = NULL;

        return (node);
    }

    void morrisTraversal(Node* root) {
        Node* curr = root;
        while(curr != NULL) {
            if(curr->left == NULL) {
                cout << curr->data << " ";
                curr = curr->right;
            }
            else{
                Node* prev = curr->left;
                while(prev->right != NULL && prev->right != curr) {
                    prev = prev->right;
                }
                if(prev->right == curr) {
                    cout << curr->data << " ";
                    prev->right = NULL;
                    curr = curr->right;
                }
                else {
                    prev->right = curr;
                    curr = curr->left;
                }
            }
        }
    }

    int main()
    {
        struct Node* root = newNode(1);
        root->left = newNode(2);
        root->right = newNode(3);
        root->left->left = newNode(4);
        root->left->right = newNode(5);
        root->left->right->right = newNode(6);

        morrisTraversal(root);
        return 0;
    }
    T.C : O(N)
    S.C : O(1)

