//
Given a Binary Tree. Find the Zig-Zag Level Order Traversal of the Binary Tree.

Example 1:

Input:
        1
      /   \
     2     3
    / \   /  \
   4   5 6    7
Output:
1 3 2 4 5 6 7
Example 2:

Input:
           7
        /     \
       9       7
     /  \     /   
    8    8   6     
   /  \
  10   9 
Output:
7 7 9 8 8 6 9 10
//

    ** Approach : Traverse level wise. For every even level reverse the vector and add it to ans.
    
    vector <int> zigZagTraversal(Node* root)
    {
    	if(root == NULL){
    	    return {};
    	}
    	vector<int> ans;
    	queue<Node*> q;
    	bool flag = false;
    	q.push(root);
    	while(!q.empty()){
    	    int n = q.size();
    	    
    	    vector<int> v;
    	    for(int i=0; i<n; i++){
    	        Node* curr = q.front();
    	        q.pop();
    	        v.push_back(curr->data);
    	        if(curr->left){
    	            q.push(curr->left);
    	        }
    	        if(curr->right){
    	            q.push(curr->right);
    	        }
    	    }
    	    if(flag){
    	        reverse(v.begin(), v.end());
    	    }
    	    flag = !flag;
    	    for(int i=0; i<v.size(); i++){
    	        ans.push_back(v[i]);
    	    }
    	}
    	return ans;
    }
    T.C : O(N)
    S.C : O(N)
