//
Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. 
Each path should be returned as a list of the node values, not node references.

A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.

Example 1:

Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]
Explanation: There are two paths whose sum equals targetSum:
5 + 4 + 11 + 2 = 22
5 + 8 + 4 + 5 = 22
//

    **Approach : We will traverse all the nodes from root to leaf using BFS/DFS and keep pushing the nodes on the way. At the base case we will check 
    wheather the targetSum == 0 or not. If it is zero then simply add that path into ans otherwise keep don't. And most IMP is to pop back the nodes inorder to 
    check other posssibility of path.
    void dfs(TreeNode* root, vector<vector<int>> &ans, vector<int> &path, int targetSum) {
    
        if(root == nullptr)
            return;

        path.push_back(root->val);
        targetSum -= root->val;

        if(root->left == nullptr && root->right == nullptr) {
            if(targetSum == 0){
                ans.push_back(path);
                path.pop_back();
                return;
            }
        }
        
        dfs(root->left, ans, path, targetSum);
        dfs(root->right, ans, path, targetSum);
        
        path.pop_back();
    }

    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>> ans;
        vector<int> path;
        dfs(root, ans, path, targetSum);
        return ans;
    }
    T.C : O(N^2) since we need to copy the path into ans vector.
    S.C : O(N) we are not considering ans vector as it is the output.
