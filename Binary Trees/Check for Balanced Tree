//
Given a binary tree, find if it is height balanced or not. 
A tree is height balanced if difference between heights of left and right subtrees is not more than one for all nodes of tree. 

A height balanced tree
        1
     /     \
   10      39
  /
5

An unbalanced tree
        1
     /    
   10   
  /
5

Example 1:

Input:
      1
    /
   2
    \
     3 
Output: 0
Explanation: The max difference in height
of left subtree and right subtree is 2,
which is greater than 1. Hence unbalanced
Example 2:

Input:
       10
     /   \
    20   30 
  /   \
 40   60
Output: 1
Explanation: The max difference in height
of left subtree and right subtree is 1.
Hence balanced. 
//

    ** Approach : Find the diffrence between left and right tree height, then call recursively for left subtree and right subtree. Return false if condition fails.
    
    int treeHeight(Node* root){
        if(root == NULL){
            return 0;
        }
        return 1 + max(treeHeight(root->left), treeHeight(root->right));
    }
    
    //Function to check whether a binary tree is balanced or not.
    bool isBalanced(Node *root)
    {
        //  Your Code here
        if(root == NULL){
            return true;
        }
        int lHeight = treeHeight(root->left);
        int rHeight = treeHeight(root->right);
        if((abs(lHeight - rHeight) <= 1) && isBalanced(root->left) && isBalanced(root->right)){
            return true;
        }
        else{
            return false;
        }
    }
    T.C : O(N)
    S.C : O(1)
