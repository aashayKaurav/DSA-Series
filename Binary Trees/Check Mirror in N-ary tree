//
Given two n-ary trees. Check if they are mirror images of each other or not. You are also given e denoting the number of edges in both trees, 
and two arrays, A[] and B[]. Each array has 2*e space separated values u,v denoting an edge from u to v for the both trees.

Example 1:

Input:
n = 3, e = 2
A[] = {1, 2, 1, 3}
B[] = {1, 3, 1, 2}
Output:
1
Explanation:
   1          1
 / \        /  \
2   3      3    2 
As we can clearly see, the second tree
is mirror image of the first.
Example 2:

Input:
n = 3, e = 2
A[] = {1, 2, 1, 3}
B[] = {1, 2, 1, 3}
Output:
0
Explanation:
   1          1
 / \        /  \
2   3      2    3 
As we can clearly see, the second tree
isn't mirror image of the first.
//

    ** Approach : There is no need to create the trees we can use map where we can store {parent : stack(child nodes)} and for B we can keep poping childs of each node
    and if order doesnt match then return false else return true.
    
    int checkMirrorTree(int n, int e, int A[], int B[]) {
        
        unordered_map<int, stack<int>> mp;
        
        for(int i=1; i<2*e; i+=2) {
            mp[A[i-1]].push(A[i]);
        }
        
        for(int i=1; i<2*e; i+=2) {
            if(mp[B[i-1]].top() != B[i]) {
                return 0;
            }
            mp[B[i-1]].pop();     // keep poping so as to check next child
        }
        return 1;
    }
    T.C : O(N)
    S.C : O(N)
