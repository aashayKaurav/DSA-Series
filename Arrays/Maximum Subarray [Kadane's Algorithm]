//
Given an integer array nums, find the subarray with the largest sum, and return its sum.

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
//

int maxSubArray(vector<int>& nums) {
        int n = nums.size();
        //1. Take maxSum that stores max sum found so far and update it with currSum if
        //less than currSum.
        //2. If currSum is less than 0 so inorder to maximize the sum its better to initialize to zero. 
        int maxSum = INT_MIN, currSum = 0;
        for(int i=0; i<n; i++){
            currSum += nums[i];
            if(maxSum < currSum){
                maxSum = currSum;
            }
            if(currSum < 0){
                currSum = 0;
            }
        }
        return maxSum;
    }
    T.C : O(N) and S.C : O(1)
