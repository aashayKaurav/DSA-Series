//
Given an array of integers. Find the Inversion Count in the array. 

Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. 
If array is already sorted then the inversion count is 0. If an array is sorted in the reverse order then the inversion count is the maximum. 
Formally, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j.
 
Example 1:

Input: N = 5, arr[] = {2, 4, 1, 3, 5}
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 
has three inversions (2, 1), (4, 1), (4, 3).
//

    **Intuition : Using Merge sort technique and while merging if ith element of left array > jth element of right array then mid-i+1 elements will we counted
    as inversions.
    
    void merge(long long arr[], long long int l, long long int mid, long long int h, long long int &count){
        long long int n1 = mid-l+1;
        long long int n2 = h-mid;
        
        long long int arr1[n1], arr2[n2];
        
        for(long long int i=0; i<n1; i++){
            arr1[i] = arr[l+i];
        }
        
        for(long long int i=0; i<n2; i++){
            arr2[i] = arr[mid+1+i];
        }
        
        long long int i=0, j=0, k=l;
        while(i<n1 && j<n2){
            if(arr1[i] <= arr2[j]){
                arr[k] = arr1[i];
                i++;
                k++;
            }
            else{
                count += n1-i;
                arr[k] = arr2[j];
                j++;
                k++;
            }
        }
        while(i<n1){
            arr[k] = arr1[i];
            i++;
            k++;
        }
        while(j<n2){
            arr[k] = arr2[j];
            j++;
            k++;
        }
        
    }
    
    void mergeSort(long long arr[], long long l, long long h, long long int &count){
        
        
        if(l<h){
            long long int mid = (l+h)/2;
            mergeSort(arr, l, mid, count);
            mergeSort(arr, mid+1, h, count);
            
            merge(arr, l, mid, h, count);
        }
        
    }
    
    long long int inversionCount(long long arr[], long long N)
    {
        // Your Code Here
        
        long long int count=0;
        
        mergeSort(arr, 0, N-1, count);
        return count;
    }
    T.C : O(NlogN) and S.C : O(N)
