//
Given an array of integers. Find the Inversion Count in the array. 

Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. 
If array is already sorted then the inversion count is 0. If an array is sorted in the reverse order then the inversion count is the maximum. 
Formally, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j.
 
Example 1:

Input: N = 5, arr[] = {2, 4, 1, 3, 5}
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 
has three inversions (2, 1), (4, 1), (4, 3).
//

    **Intuition : Using Merge sort technique and while merging if ith element of left array > jth element of right array then mid-i+1 elements will we counted
    as inversions.
    
    long long merge(long long arr[], int low, int mid, int high) {
        int left = low;
        int right = mid + 1;
        
        long long inversionCount = 0;
        
        vector<long long> temp;
        
        while (left <= mid && right <= high) {
            if (arr[left] <= arr[right] ) {
                temp.push_back(arr[left]);
                left++;
            }
            else {
                temp.push_back(arr[right]);
                inversionCount += (mid - left + 1);
                right++;
            }
        }
    
        while (left <= mid) {
            temp.push_back(arr[left]);
            left++;
        }
    
        while (right <= high) {
            temp.push_back(arr[right]);
            right++;   
        }
    
        // copy to the original array
        for (int i=low; i<= high; i++) {
            arr[i] = temp[i - low];
        };
        
        return inversionCount;
    }
    
    long long mergeSort(long long arr[], int low, int high) {
        if (low >= high) return 0;
        
        long long int cnt = 0;
        int mid = low + ( (high - low) >> 1 ) ;
        
        cnt += mergeSort(arr, low, mid);
        cnt += mergeSort(arr, mid + 1, high);
        cnt += merge(arr, low, mid, high);
        return cnt;
    }    
    
    long long int inversionCount(long long arr[], long long N)
    {
        return mergeSort(arr, 0, N-1);
    }
    T.C : O(NlogN) and S.C : O(N)
