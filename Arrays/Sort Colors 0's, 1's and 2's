//
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, 
with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
//

void sortColors(vector<int>& nums) {
        int low = 0, mid = 0, high = nums.size() - 1;
    
        while(mid <= high)
        {
            // if at mid position 0 comes then swap with low and increment both
            if(nums[mid] == 0)
            {
                swap(nums[mid], nums[low]);
                low++;
                mid++;
            }
            // if at mid == 1 then simply increment mid
            else if(nums[mid] == 1)
            {
                mid++;
            }
            // otherwise if at mid 2 comes then swap with high and only decrement high since we don't know wheather the element swapped at mid 
            // position is equal to 0 or 1.
            else if(nums[mid] == 2)
            {
                swap(nums[mid], nums[high]);
                high--;
            }
        }
    }
