//
Given two sorted arrays array1 and array2 of size m and n respectively. Find the median of the two sorted arrays.

Example 1:

Input:
m = 3, n = 4
array1[] = {1,5,9}
array2[] = {2,3,6,7}
Output: 5
Explanation: The middle element for
{1,2,3,5,6,7,9} is 5
//

    **Approach : Take a count from 0 to (n+m)/2 (say mid) and keep traversing the elements of arr1 and arr2 in sorted order.
    Finally check whether (n+m)%2 is even or odd and then accordingly return ( [mid-1]th + [mid]th )/2 else [mid]th.
    
    double MedianOfArrays(vector<int>& array1, vector<int>& array2)
    {
        int n = array1.size(), m = array2.size();
        // prev will hold the previous value and curr will hold the current value.
        double prev = -1, curr = -1;
        int i = 0, j = 0;
        for(int count =0; count <= (n+m)/2; count++){
            prev = curr;
            if(i != n && j != m){
                curr = (array1[i] <= array2[j]) ? array1[i++] : array2[j++]; 
            }
            else if(i != n){
                curr = array1[i++];
            }
            else{
                curr = array2[j++];
            }
        }
        if((n+m)%2 == 1){
            return (curr);
        }
        else{
            return ((prev + curr)/2.0);
        }
    }
    T.C : O(N + M) and S.C : (1)
    
    **Approach : Binary Search on min size array. 
    double MedianOfArrays(vector<int>& array1, vector<int>& array2)
    {
        if(array2.size() < array1.size()){
            return MedianOfArrays(array2, array1);
        }
        
        int n = array1.size(), m = array2.size();
        int low = 0, high = n;
        while(low <= high){
            int cut1 = (high+low)>>1;
            int cut2 = (n + m + 1)/2 - cut1;
            
            int left1 = cut1 == 0 ? INT_MIN : array1[cut1-1];
            int left2 = cut2 == 0 ? INT_MIN : array2[cut2-1];
            
            int right1 = cut1 == n ? INT_MAX : array1[cut1];
            int right2 = cut2 == m ? INT_MAX : array2[cut2];
            // This is the main condition to satisfy that there is equal
            // partition of arrays.
            if(left1 <= right2 && left2 <= right1){
                // If even then 
                if((n+m)%2 == 0){
                    return (max(left1, left2) + min(right1, right2))/2.0;
                }
                // if odd then
                else{
                    return max(left1, left2);
                }
            }
            // decrease left1 and increase right2 by taking cut1 towards left
            else if(left1 > right2){
                high = cut1 - 1;
            }
            // decrease left2 and increase right1 by taking cut1 towards right
            else {
                low = cut1 + 1;
            }
        }
        
        return 0.0;
    }
    T.C : O(min(log n, log m)) and S.C : O(1)
