//
Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
//

    ** Brute : First sort the array and run a loop and maintain a ans variable and update if we found longest consequtive sequence.
    T.C : O(N Log N) 
    and S.C : O(N)
    
    **Optimal Approach : Use Hash Map to store all the elements after that run a loop and check whether less than this element is not present in the hash map.
    Because this will be the initial element of our consequtive sequence. So start from here and keep counting and store in the ans. 
    
    int longestConsecutive(vector<int>& nums) {
        unordered_map<int, int> mp;
        int n = nums.size();
        if(n == 0){
            return 0;
        }
        for(int i=0; i<n; i++){
            mp[nums[i]] = nums[i];
        }
        int ans = INT_MIN;
        for(int i=0; i<n; i++){
            if(mp.find(nums[i]-1) == mp.end()){
                int count = 1;
                int temp = 1;
                while(mp.find(nums[i] + temp) != mp.end()){
                    count++;
                    temp++;
                }
                ans = max(ans, count);
            }
        }
        if(ans == INT_MIN){
            return 0;
        }
        return ans;
    }
    T.C : O(N) because we are only running a loop one time from the initial element of the consequtive sequence and hash map search takes O(1) time.
    S.C : o(1)
