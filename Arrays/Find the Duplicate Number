//
Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
//

    **APPROACH : Using linked list cyclic property, taking slow and fast iterators and traversing them.
    Once both of them are equal then taking fast to start and then linearly traversing both. The point where they both meet will be the duplicate number.
    T.C : O(N)
    
    int findDuplicate(vector<int>& nums) {
        int n = nums.size();
        int s = nums[0];
        int f = nums[nums[0]];
        while(s != f){
            s = nums[s];
            f = nums[nums[f]];
        }
        f = 0;
        while(f != s){
            f = nums[f];
            s = nums[s];
        }
        return f;
    }
