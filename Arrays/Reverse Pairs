//
Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where:

    0 <= i < j < nums.length and
    nums[i] > 2 * nums[j].

Example 1:

Input: nums = [1,3,2,3,1]
Output: 2
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1

//

    **INTUTION : Use Merge sort (Divide and Conquer Technique) to find the reverse pairs. While merging just run a loop and check untill what
    point arr1[i] > 2 * arr2[j] because till that point we get reverse pair count and add that in our ans. Keep doing till array gets sorted
    and at last return ans.
    
    void merge(vector<int> &nums, int l, int m, int r, int &count){
        int n1 = m-l+1;
        int n2 = r-m;
        
        vector<int> l1(n1);
        vector<int> l2(n2);

        
        for(int i=0; i<n1; i++){
            l1[i] = nums[l+i];
        }
        for(int i=0; i<n2; i++){
            l2[i] = nums[m+1+i];
        }
        int i = 0, j = m+1, k = l;

        for(int i=l; i <= m; i++){
            while(j <= r && nums[i] > (long long)2 * nums[j]){
                j++;
            }
            count += j - (m+1);
        }
        j = 0;
        while(i < n1 && j < n2){
            if(l1[i] <= l2[j]){
                nums[k++] = l1[i++];
            }
            else{
                nums[k++] = l2[j++];
            }
        }
        while(i < n1){
            nums[k++] = l1[i++];
        }
        while(j < n2){
            nums[k++] = l2[j++];
        }
    }

    void mergeSort(vector<int> &nums, int low, int high, int &count){
        
        if(low < high){
            int mid = low + ((high-low)>>1);

            mergeSort(nums, low, mid, count);
            mergeSort(nums, mid+1, high, count);
            merge(nums, low, mid, high, count);

        }

    }

    int reversePairs(vector<int>& nums) {
        int count = 0;
        int n = nums.size();
        mergeSort(nums, 0, n-1, count);
        return count;
    }
    T.C : O(NlogN + N)
    S.C : O(N)
