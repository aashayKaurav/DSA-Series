//
Given an array Arr[] that contains N integers (may be positive, negative or zero). Find the product of the maximum product subarray.

Example 1:

Input:
N = 5
Arr[] = {6, -3, -10, 0, 2}
Output: 180
Explanation: Subarray with maximum product
is [6, -3, -10] which gives product as 180.
Example 2:

Input:
N = 6
Arr[] = {2, 3, 4, 5, -1, 0}
Output: 120
Explanation: Subarray with maximum product
is [2, 3, 4, 5] which gives product as 120.
//

    Optimal Approach : Take two pointers start and end, keep doing the prefixMul and suffixMul and update the ans iff the multiplication is larger than both of them.
    Also inorder to handle the case where we get zero then simply start fresh i.e if prefixMul gets zero then start=1 or it suffixMul gets zero then end=1.
    The other case of negative no. will auto taken care of.
    
    long long maxProduct(vector<int> arr, int n) {
	    // code here
	    int i=0, j=n-1;
	    long long maxPro = INT_MIN;
	    long long start=1, end=1;
	    
	    while(i<n && j>=0){
	        start *= arr[i];
	        end *= arr[j];
	        maxPro = max(maxPro, max(start, end));
	        if(arr[i] == 0){
	            start = 1;
	        }
	        if(arr[j] == 0){
	            end = 1;
	        }
	        i++;
	        j--;
	    }
	    return maxPro;
	}
