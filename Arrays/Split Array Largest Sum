//
Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.

Return the minimized largest sum of the split.

A subarray is a contiguous part of the array.

Example 1:

Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.
Example 2:

Input: nums = [1,2,3,4,5], k = 2
Output: 9
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.
//

    ** Approach : Binary Search Algo
    We can observe the search space is between [maxElement, sumOfElements] we obtain mid and check whether it satisfies the condition or not if satisfies then
    decrement high as high = mid-1 else increase low as low = mid+1. Finally return the value of high.
    
    bool isPossible(vector<int> &nums, int maxSum, int k) {
        int noOfSubArrays=1, sum=0;
        for(int i=0; i<nums.size(); i++) {
            sum += nums[i];
            if(sum > maxSum) {
                noOfSubArrays++;
                sum = nums[i];
            }
        }
        if(noOfSubArrays <= k) return true;
        return false;
    }

    int splitArray(vector<int>& nums, int k) {
        int low = INT_MIN, high = 0;
        for(int i=0; i<nums.size(); i++) {
            if(low < nums[i]) {
                low = nums[i];
            }
            high += nums[i];
        }
        int ans = 0;
        while(low <= high) {
            int mid = low + ((high-low)>>1);
            if(isPossible(nums, mid, k)) {
                ans = mid;
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return ans;
    }
    T.C : O(NLog(sumOfElements - maxElement))
    S.C : O(1)
    
