//
Given an array of size n and a range [a, b]. The task is to partition the array around the range such that array is divided into three parts.
1) All elements smaller than a come first.
2) All elements in range a to b come next.
3) All elements greater than b appear in the end.
The individual elements of three sets can appear in any order. You are required to return the modified array.

Example 1:

Input: 
n = 5
A[] = {1, 2, 3, 3, 4}
[a, b] = [1, 2]
Output: 1
Explanation: One possible arrangement is:
{1, 2, 3, 3, 4}. If you return a valid
arrangement, output will be 1.
//

    **Approach : We traverse the given array of elements from left. We keep track of two pointers, first to store smaller element 
    (smaller than range) from beginning, and second to store greater element from end. 
    while traversing the array use these two pointers to place elements according to there range.
    T.C : O(N) and S.C : (1)
    
    void threeWayPartition(vector<int>& array,int a, int b)
    {
        int start = 0, end = array.size()-1;
        for(int i=0; i<=end;){
            // Swap with start pointer and increase both if less than range
            if(array[i] < a){
                if(i == start){
                    i++;
                    start++;
                }
                else{
                    swap(array[i++], array[start++]);
                }
            }
            // If greater than range then swap with end and decrement end but don't increment i since we have not validated whether 
            // this element falss in which range.
            else if(array[i] > b){
                swap(array[i], array[end--]);
            }
            else{
                i++;
            }
        }
    }
