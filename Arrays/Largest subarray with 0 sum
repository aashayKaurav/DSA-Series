//
Given an array having both positive and negative integers. The task is to compute the length of the largest subarray with sum 0.

Example 1:

Input:
N = 8
A[] = {15,-2,2,-8,1,7,10,23}
Output: 5
Explanation: The largest subarray with
sum 0 will be -2 2 -8 1 7.
//

    **Approach : Keep adding elements in sum and store intp map along with index. Once we find the sum already present in the map then from that 
    point uptill this point we get an array havimng sum = 0. So calculate the maximum length.
    
    int maxLen(vector<int>&A, int n)
    {   
        unordered_map<int, int> mp;
        int sum = 0;
        int len = 0;
        for(int i=0; i<n; i++){
            sum += A[i];
            if(sum == 0){
                len = i+1;
            }
            else if(mp.find(sum) != mp.end()){
                len = max(len, i - mp[sum]);
            }
            else{
                mp[sum] = i;
            }
        }
        return len;
    }
    T.C : O(N)
    S.C : O(N)
