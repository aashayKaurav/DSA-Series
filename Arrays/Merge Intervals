//
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping 
intervals that cover all the intervals in the input.

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
//

    **Approach : Sort the intervals first then take the first interval and keep checking untill the point where the intervals can get merged in it.
    otherwise add this interval into the ans and try from other intervals.
    
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>> ans;
        if(intervals.size() == 1){
            return intervals;
        }
        sort(intervals.begin(), intervals.end());
        vector<int> tempInterval = intervals[0];

        for(auto it : intervals){
            if(it[0] <= tempInterval[1]){
                tempInterval[1] = max(tempInterval[1], it[1]);
            }
            else{
                ans.push_back(tempInterval);
                tempInterval = it;
            }
        }
        ans.push_back(tempInterval);
        return ans;
    }
    T.C : O(NLogN + N) and S.C : O(N*2)
