//
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. 
In this case, 6 units of rain water (blue section) are being trapped.

Input: height = [4,2,0,3,2,5]
Output: 9
//

    **Brute Force Approach : 
    
    int trap(vector<int>& height) {
        int n = height.size();
        int water = 0;
        for(int i=0; i<n; i++){
            int leftMax = 0, rightMax = 0;
            int j = i;
            while(j >= 0){
                leftMax = max(leftMax, height[j]);
                j--;
            }
            j = i;
            while(j < n){
                rightMax = max(rightMax, height[j]);
                j++;
            }
            water += min(leftMax, rightMax) - height[i];
        }
        return water;
    }
    T.C : O(N^2) 
    S.C : O(1)
 --------------------------------------------------------------------------------------------------------------------------------------------------------
 
    ** Better Approach : Precompute the previous and next maximum for each index. Then take minimum of the two and subtract the height of the current bar.
    
    int trap(vector<int>& height) {
        vector<int> leftHigher(n, 0);
        vector<int> rightHigher(n, 0);
        
        leftHigher[0] = arr[0];
        for(int i=1; i<n; i++){
            leftHigher[i] = max(leftHigher[i-1], arr[i]);
        }
        rightHigher[n-1] = arr[n-1];
        for(int i=n-2; i>=0; i--){
            rightHigher[i] = max(rightHigher[i+1], arr[i]);
        }
        long long ans = 0;
        for(int i=0; i<n; i++){
            ans += (min(leftHigher[i], rightHigher[i])-arr[i]);
        }
        return ans;
    }
    T.C : O(N)
    S.C : O(N)
