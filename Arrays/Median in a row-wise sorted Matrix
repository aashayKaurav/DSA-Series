//
Given a row wise sorted matrix of size R*C where R and C are always odd, find the median of the matrix.

Example 1:

Input:
R = 3, C = 3
M = [[1, 3, 5], 
     [2, 6, 9], 
     [3, 6, 9]]
Output: 5
Explanation: Sorting matrix elements gives 
us {1,2,3,3,5,6,6,9,9}. Hence, 5 is median. 
 

Example 2:

Input:
R = 3, C = 1
M = [[1], [2], [3]]
Output: 2
Explanation: Sorting matrix elements gives 
us {1,2,3}. Hence, 2 is median.
//

    **Optimal Approach : The idea is to keep shortening the search space of the mAtrix. If a matrix 3*3 then median will definately at the 5th index (1 based).
    So we will keep updating our search space and if low > high then at this point low will be pointing to median of the matrix.
    
    int countLessThanEqualTo(vector<int> &vec, int key) {
        int low=0, high = vec.size()-1;
        while(low <= high) {
            int mid = ((low+high)>>1);
            if(vec[mid] <= key) {
                low = mid+1;
            }
            else {
                high = mid-1;
            }
        }
        return low;
    }

    int median(vector<vector<int>> &matrix, int R, int C){
        int low = 1, high = 2000;
        int n = matrix.size(), m = matrix[0].size();
        while(low <= high) {
            int count = 0;
            int mid = ((low+high)>>1);
            for(int i=0; i<n; i++) {
                count += countLessThanEqualTo(matrix[i], mid);
            }
            if(count <= (n*m)>>1) low = mid+1;
            else{
                high = mid-1;
            }
        }
        return low;
    }
    T.C : O(32 * R * log(C))
    S.C : O(1)
