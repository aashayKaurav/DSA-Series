//
Given an array arr of n positive integers and a number k. One can apply a swap operation on the array any number of times, 
i.e choose any two index i and j (i < j) and swap arr[i] , arr[j] . 
Find the minimum number of swaps required to bring all the numbers less than or equal to k together, i.e. make them a contiguous subarray.

Example 1:

Input : 
arr[ ] = {2, 1, 5, 6, 3} 
K = 3
Output : 
1
Explanation:
To bring elements 2, 1, 3 together,
swap index 2 with 4 (0-based indexing),
i.e. element arr[2] = 5 with arr[4] = 3
such that final array will be- 
arr[] = {2, 1, 3, 6, 5}
//

    **Approach : Use Two Pointer and Sliding Window Technique.
    1.  Find the count of all elements which are less than or equal to ‘k’. Let’s say the count is ‘cnt’.
    2.  Using the two-pointer technique for a window of length ‘cnt’, each time keep track of 
    how many elements in this range are greater than ‘k’. Let’s say the total count is ‘bad’.
    3.  Repeat step 2, for every window of length ‘cnt’ and take a minimum of count ‘bad’ among them. This will be the final answer.
    
    int minSwap(int arr[], int n, int k) {
        
        int cnt = 0, bad = 0;
        
        for(int i=0; i<n; i++){
            if(arr[i] <= k)
                cnt++;
        }
        for(int i=0; i<cnt; i++){
            if(arr[i] > k){
                bad++;
            }
        }
        int ans = bad;
        for(int i=0, j=cnt; j < n; i++, j++){
            
            if(arr[i] > k){
                bad--;
            }
            if(arr[j] > k){
                bad++;
            }
            ans = min(ans, bad);
        }
        return ans;
    }
