//
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

Example 1:

Input: nums = [3,2,3]
Output: [3]

Example 2:

Input: nums = [1]
Output: [1]
//
      **Approach : Extention of Moores algo...Not more that 2 elements can be in ans.
      vector<int> majorityElement(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans;
             
        int num1 = -1, num2 = -1;
        int c1 = 0, c2 = 0;
        for(int i=0; i<n; i++){
            
            if(num1 == nums[i]){
                c1++;
            }
            else if(num2 == nums[i]){
                c2++;
            }
            else if(c1 == 0){
                num1 = nums[i];
                c1++;
            }
            else if(c2 == 0){
                num2 = nums[i];
                c2++;
            }
            else{
                c1--;
                c2--;
            }
        }
        c1=0, c2=0;
        for(int i=0; i<n; i++){
            if(nums[i] == num1){
                c1++;
            }
            else if(nums[i] == num2){
                c2++;
            }
        }
        if(c1 > n/3)
            ans.push_back(num1);
        if(c2 > n/3)
            ans.push_back(num2);

        return ans;
    }
