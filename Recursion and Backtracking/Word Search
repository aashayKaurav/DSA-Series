//
Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or 
vertically neighboring. The same letter cell may not be used more than once.

Example 1:

Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true

Example 2:

Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true
//

    APPROACH : For every index we have search whether it is possible to generate the given word or not. Also we have to
    mark that index with some delimeter and put the original character back to find for other possibity.

    bool solve(vector<vector<char>>& board, string &word, int i, int j, int index){
        if(index == word.size())
            return true;
        if(i<0 || i>= board.size() || j<0 || j>=board[0].size()){
            return false;
        }
        if(board[i][j] != word[index])
            return false;
        
        board[i][j] = '*';
        
        bool search = solve(board, word, i+1, j, index+1) ||
                    solve(board, word, i-1, j, index+1) ||
                    solve(board, word, i, j+1, index+1) ||
                    solve(board, word, i, j-1, index+1);
        board[i][j] = word[index];
        return search;
    }
    
    bool exist(vector<vector<char>>& board, string word) {
        
        int m = board.size();
        int n = board[0].size();
        for(int i = 0; i<m; i++){
            for(int j=0; j<n; j++){
                if(solve(board, word, i, j, 0))
                    return true;
            }
        }
        return false;
    }
    T.C : O(M * N * 4^L) where L is the length of the target word
    S.C : O(1)
