//
Given two strings S1 and S2 of equal length, the task is to determine if S2 is a scrambled form of S1.

Scrambled string: Given string str, we can represent it as a binary tree by partitioning it into two non-empty substrings recursively.
Below is one possible representation of str = coder:
 
To scramble the string, we may choose any non-leaf node and swap its two children. 
Suppose, we choose the node co and swap its two children, it produces a scrambled string ocder.
Similarly, if we continue to swap the children of nodes der and er, it produces a scrambled string ocred.

Note: Scrambled string is not the same as an Anagram.

Print "Yes" if S2 is a scrambled form of S1 otherwise print "No".

Example 1:

Input: S1="coder", S2="ocder"
Output: Yes
Explanation: ocder is a scrambled 
form of coder.

    ocder
   /    \
  oc    der
 / \    
o   c  

As "ocder" can represent it 
as a binary tree by partitioning 
it into two non-empty substrings.
We just have to swap 'o' and 'c' 
to get "coder".
//

unordered_map<string,int> t;

    bool isScramble(string s1, string s2){
        int n = s1.size();
        int m = s2.size();
        
        if(n != m)
            return false;
        if(s1 == s2)
            return true;
        if(n <= 1 || m <= 1)
            return false;
        
            
        bool flag = false;
        
        for(int i=1; i<=n-1; i++){
            
            string key = s1 + "_" + s2;
            if(t.find(key) != t.end()){
                return t[key];
            }
            if(isScramble(s1.substr(0,i),s2.substr(n-i,i))&&
            isScramble(s1.substr(i,n-i),s2.substr(0,n-i))){
                flag = true;
                break;
            }
            if(isScramble(s1.substr(0,i),s2.substr(0,i))&&
            isScramble(s1.substr(i,n-i),s2.substr(i,n-i))){
                flag = true;
                break;
            }
            else{
                continue;
            }
        }
        string k = s1 + "_" + s2;
        t[k] = flag;
        
        return flag;
    }
