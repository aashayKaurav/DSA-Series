//
Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]

Input: s = "a"
Output: [["a"]]
//

    **Approach : For every index try the possibility of getting a palindrome. If this substring is a palindrome then add it into the list, 
    and call for the next index. Keep doing until the last index then by backtracking pop the elements and increment the length of the substring.
    
    bool isPalin(string &s, int i, int j){
        while(i <= j){
            if(s[i] != s[j])
                return false;
            i++;
            j--;
        }
        return true;
    }

    void solve(int i, int n, string &s, vector<vector<string>> &ans, vector<string> &temp){
        if(i >= n){
            ans.push_back(temp);
            return;
        }
        for(int j=i; j<n; j++){
            if(isPalin(s, i, j)){
                temp.push_back(s.substr(i, j-i+1));
                solve(j+1, n, s, ans, temp);
                temp.pop_back();
            }
        }
    }

    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> temp;
        solve(0, s.size(), s, ans, temp);
        return ans;
    }
    T.C : O(2^N * K * N/2) where 2^N = #of possibility of substrings, k = for inserting the palindromes in another data structure and N/2 = to find palindrome
    S.C : O(K * x) where K = avg length of list of palindromes and x = #of such lists.
