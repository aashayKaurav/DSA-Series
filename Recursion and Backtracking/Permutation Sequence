//
The set [1, 2, 3, ..., n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:
"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

Example 1:

Input: n = 3, k = 3
Output: "213"

Example 2:

Input: n = 4, k = 9
Output: "2314"
//

    **Brute Force Approach : We can generate all the permutations of the n then sort those permutaions of n. And finally return the (k-1)th permutation.
    
    void solve(string &s, int index, vector<string> &res) {
        if (index == s.size()) {
            res.push_back(s);
            return;
        }
        for (int i = index; i < s.size(); i++) {
            swap(s[i], s[index]);
            solve(s, index + 1, res);
            swap(s[i], s[index]);
        }
    }

    string getPermutation(int n, int k) {
        string s;
        vector < string > res;
    
        for (int i = 1; i <= n; i++) {
            s.push_back(i + '0');
        }
        solve(s, 0, res);
    
        sort(res.begin(), res.end());
    
        auto it = res.begin() + (k - 1);
        return *it;
    }
    T.C : O(N! * N) + (N! * log N!)
    => N! * N because of generating all possible permutes of n and every time coping into ds. And N! * log N! for sorting them.
    S.C : O(N)
----------------------------------------------------------------------------------------------------------------------------------------------------------

    **Optimal Approach : First we will initialize a vector nums of int having nums from 1 to n. For n factorial we will take (n-1) factorial, 
    then k/(n-1)! = the index which will be the first number in ans also erase the element from the num array. After that we will k = k % (n-1)!. 
    We will keep doing this untill nums.size() == 0.
    
    string getPermutation(int n, int k) {
        string ans = "";
        vector<int> nums;
        int fact = 1;
        for(int i=1; i<n; i++){
            fact *= i;
            nums.push_back(i);
        }
        nums.push_back(n);
        k = k-1;
        while(true){            
            ans += to_string(nums[k/fact]);
            nums.erase(nums.begin() + k/fact);
            if(nums.size() == 0){
                break;
            }
            k = k % fact;
            fact = fact / nums.size();
        }
        return ans;
    }
    T.C : O(N * N)
    => We are placing N numbers in N positions and for erasing a number takes O(N) time.
    S.C : O(N)
    => vector of nums is used.
