//
Given an undirected graph and an integer M. The task is to determine if the graph can be colored with at most M colors such that no two 
adjacent vertices of the graph are colored with the same color. Here coloring of a graph means the assignment of colors to all vertices. 
Print 1 if it is possible to colour vertices and 0 otherwise.

Example 1:

Input:
N = 4
M = 3
E = 5
Edges[] = {(0,1),(1,2),(2,3),(3,0),(0,2)}
Output: 1
Explanation: It is possible to colour the
given graph using 3 colours.
//

    **Approach : For every node try out all the possibilities. Maintain a color array storing the colors assigned to each node. Also do a isValid check
    for the node i.e. it should not hold a color same as one of its adjacent node.
    
    // check whether adjacent node doesn't hold same color.
    bool isSafe(int node, bool graph[101][101], int color[], int n, int col){
        for(int k=0; k<n; k++){
            if(k != node && graph[k][node] == true && color[k] == col)
                return false;
        }
        return true;
    }

    bool solve(int node, bool graph[101][101], int color[], int m, int n){
        if(node == n){
            return true;
        }
        for(int i=1; i<=m; i++){
            if(isSafe(node, graph, color, n, i)){
                color[node] = i;
                if(solve(node+1, graph, color, m, n))
                    return true;
                color[node] = 0;    // backtrack
            }
        }
        return false;
    }

    // Function to determine if graph can be coloured with at most M colours such
    // that no two adjacent vertices of graph are coloured with same colour.
    bool graphColoring(bool graph[101][101], int m, int n) {
        
        int color[n] = {0};
        if(solve(0, graph, color, m, n))
            return true;
        
        return false;
    }
    T.C : O(N^m)
    S.C : O(N)
