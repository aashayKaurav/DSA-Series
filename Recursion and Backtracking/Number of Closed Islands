//
Given a 2D grid consists of 0s (land) and 1s (water).  An island is a maximal 4-directionally connected group of 0s and a closed island is an 
island totally (all left, top, right, bottom) surrounded by 1s.

Return the number of closed islands.

Example 1:

Input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]
Output: 2
Explanation: 
Islands in gray are closed because they are completely surrounded by water (group of 1s).
//

    ** Approach : Simply we will apply DFS/BFS for all unvisited lands and check wheather this land is closed or not. If closed we will increment the result.
    Otherwise not. One thing to note is that only if we get true from all four directions then only we will be assured that the land is closed otherwise
    it will be the unclosed land.
    
    bool dfs(vector<vector<int>> &grid, vector<vector<int>> &vis,
    int i, int j) {
    
        if(i == grid.size() || j == grid[0].size() || i < 0 || j < 0)
            return false;
        
        if(grid[i][j] == 1 || vis[i][j] == 1)
            return true;
            
        vis[i][j] = 1;
       
        bool a = dfs(grid, vis, i+1, j);
        
        bool b = dfs(grid, vis, i, j+1);
        
        bool c = dfs(grid, vis, i-1, j);
        
        bool d = dfs(grid, vis, i, j-1);
        
        return a && b && c && d;
    }

    int closedIsland(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));
        int numberOfIslands = 0;
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(grid[i][j] == 0 && vis[i][j] == 0) {
                    if(dfs(grid, vis, i, j) == true)
                        numberOfIslands++;
                }
            }
        }
        return numberOfIslands;
    }
    T.C : O(N*M)
    S.C : O(N*M)
