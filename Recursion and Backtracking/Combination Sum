//
Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where 
the chosen numbers sum to target. You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one 
of the chosen numbers is different.

The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

Example 1:

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.
//

    Approach : We can check for every element whether to take it or not to take it. If we take the element then we will subtract that element from the target
    otherwise we will not subtract it from the target.
    
    void solve(int i, vector<int>& candidates, int target, vector<int> &temp, vector<vector<int>> &ans){

        if(i >= candidates.size()){
            if(target == 0){
                ans.push_back(temp);
            }
            return;
        }

        // included
        if(candidates[i] <= target){
            temp.push_back(candidates[i]);
            solve(i, candidates, target-candidates[i], temp, ans);
            temp.pop_back();
        }
        // not included
        solve(i+1, candidates, target, temp, ans);
    }

    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> temp;
        sort(candidates.begin(), candidates.end());
        solve(0, candidates, target, temp, ans);
        return ans;
    }
    T.C : O(2^T * K) where the T = target, K = avg length of temp to store in ans.
    S.C : O(K * x) where K = avg length of temp to store in ans, x = #of combinations 
