//
Consider a rat placed at (0, 0) in a square matrix of order N * N. It has to reach the destination at (N - 1, N - 1). 
Find all possible paths that the rat can take to reach from source to destination. The directions in which the rat can move are 'U'(up), 'D'(down), 
'L' (left), 'R' (right). Value 0 at a cell in the matrix represents that it is blocked and rat cannot move to it while value 1 at a cell in the matrix 
represents that rat can be travel through it.

Note: In a path, no cell can be visited more than one time. If the source cell is 0, the rat cannot move to any other cell.

Example 1:

Input:
N = 4
m[][] = {{1, 0, 0, 0},
         {1, 1, 0, 1}, 
         {1, 1, 0, 0},
         {0, 1, 1, 1}}
Output:
DDRDRR DRDDRR
Explanation:
The rat can reach the destination at 
(3, 3) from (0, 0) by two paths - DRDDRR 
and DDRDRR, when printed in sorted order 
we get DDRDRR DRDDRR.
//

    ** Approach : Take a visited matrix and check for every index whether we can reach to to that index or not if we can then mark it as visited else
    check for another index. Suppose in between there is no path to follow then we can backtrack and mark visited matrix back to 0.
    
    void solve(int i, int j, vector<vector<int>> &m, 
    vector<string> &ans, string str, vector<vector<int>> &vis, int n){
        
        if(i == n-1 && j == n-1){
            ans.push_back(str);
            return;
        }
        
        if(i+1 < n && m[i+1][j] == 1 && vis[i+1][j] != 1){
            vis[i][j] = 1;
            solve(i+1, j, m, ans, str+"D", vis, n);
            vis[i][j] = 0;
        }
        if(j+1 < n && m[i][j+1] == 1 && vis[i][j+1] != 1){
            vis[i][j] = 1;
            solve(i, j+1, m, ans, str+"R", vis, n);
            vis[i][j] = 0;
        }
        if(i-1 >= 0 && m[i-1][j] == 1 && vis[i-1][j] != 1){
            vis[i][j] = 1;
            solve(i-1, j, m, ans, str+"U", vis, n);
            vis[i][j] = 0;
        }
        if(j-1 >= 0 && m[i][j-1] == 1 && vis[i][j-1] != 1){
            vis[i][j] = 1;
            solve(i, j-1, m, ans, str+"L", vis, n);
            vis[i][j] = 0;
        }
    }
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string> ans;
        vector<vector<int>> vis(n, vector<int>(n, 0));
        if(m[0][0] == 0){
            return ans;
        }
        solve(0, 0, m, ans, "", vis, n);
        return ans;
    }
    T.C : O(4 ^ (m*n))
    S.C : O(m*n)
 ----------------------------------------------------------------------------------------------------------------------------------------
 
    ** Simplyfing the code :
    
    void solve(int i, int j, vector<vector<int>> &m, 
    vector<string> &ans, string str, vector<vector<int>> &vis, 
    int n, int di[], int dj[]){
        
        if(i == n-1 && j == n-1){
            ans.push_back(str);
            return;
        }
        
        string ref = "DLRU";
        for(int ind=0; ind<4; ind++){
            int nexti = i + di[ind];
            int nextj = j + dj[ind];
            
            if(nexti >= 0 && nextj >= 0 && nexti < n && nextj < n
            && vis[nexti][nextj] == 0 && m[nexti][nextj] == 1){
                vis[i][j] = 1;
                solve(nexti, nextj, m, ans, str+ref[ind], vis, n, di, dj);
                vis[i][j] = 0;
            }
        }
    }
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string> ans;
        vector<vector<int>> vis(n, vector<int>(n, 0));
        if(m[0][0] == 0){
            return ans;
        }
        int di[] = {+1, 0, 0, -1};
        int dj[] = {0, -1, +1, 0};
        solve(0, 0, m, ans, "", vis, n, di, dj);
        return ans;
    }
    T.C : O(4^(m*n))
    S.C : O(m*n)
