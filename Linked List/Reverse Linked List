//
Given the head of a singly linked list, reverse the list, and return the reversed list.

Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]
//
      
      ** Iterative Approach :
      ListNode* reverseList(ListNode* head) {
        if(head == NULL){
            return NULL;
        }
        ListNode* prev = NULL, *curr = head, *next = NULL;
        while(curr){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
    T.C : O(N)
    S.C : O(1)
----------------------------------------------------------------------------------
    **Recursive Approach : 
    ListNode* reverseList(ListNode* head) {
        
        if(head == NULL || head->next == NULL)
            return head;
        
        ListNode* rev = reverseList(head->next);
        
        head->next->next = head;
        head->next = NULL;
        
        return rev;
        
    }
    T.C : O(N)
    S.C : O(1)
