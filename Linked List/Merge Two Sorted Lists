//
You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.
//

    **Approach : [Merge sort technique] Use the two pointers and keep adding the node to ans linked list in sorted order.
    
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1 == NULL && list2 == NULL)
            return NULL;
        if(list1 == NULL && list2 != NULL)
            return list2;
        if(list1 != NULL && list2 == NULL)
            return list1;
        ListNode* l1 = list1;
        ListNode* l2 = list2;
        ListNode* l3 = NULL;
        ListNode* ans = NULL;
        if(l1->val <= l2->val){
            l3 = l1;
            l1 = l1->next;
        }
        else{
            l3 = l2;
            l2 = l2->next;
        }
        ans = l3;
        while(l1 && l2){
            if(l1->val <= l2->val){
                l3->next = l1;
                l3 = l1;
                l1 = l1->next;
            }
            else{
                l3->next = l2;
                l3 = l2;
                l2 = l2->next;
            }
        }
        while(l1){
            l3->next = l1;
            l3 = l1;
            l1 = l1->next;
        }
        while(l2){
            l3->next = l2;
            l3 = l2;
            l2 = l2->next;
        }
        return ans;
    }
    T.C : O(M + N)
    S.C : o(1)
