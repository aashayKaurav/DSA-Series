//
Given a linked list of size N. The task is to reverse every k nodes (where k is an input to the function) in the linked list. 
If the number of nodes is not a multiple of k then left-out nodes, in the end, should be considered as a group and must be reversed (See Example 2 for clarification).

Example 1:

Input:
LinkedList: 1->2->2->4->5->6->7->8
K = 4
Output: 4 2 2 1 8 7 6 5 
Explanation: 
The first 4 elements 1,2,2,4 are reversed first 
and then the next 4 elements 5,6,7,8. Hence, the 
resultant linked list is 4->2->2->1->8->7->6->5.
Example 2:

Input:
LinkedList: 1->2->3->4->5
K = 3
Output: 3 2 1 5 4 
Explanation: 
The first 3 elements are 1,2,3 are reversed 
first and then elements 4,5 are reversed.Hence, 
the resultant linked list is 3->2->1->5->4.
//

    ** Approach : Just reverse the first k nodes and recursion will take care the remaining.
    
    struct node *reverse (struct node *head, int k)
    { 
        if(head == NULL || head->next == NULL){
            return head;
        }        
        
        node* curr = head;
        node* prev = NULL;
        node* nextptr = NULL;
        
        int count = 0;
        
        while(curr != NULL && count < k) {
            nextptr = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nextptr;
            count++;
        }
        
        if(nextptr != NULL) {
            head->next = reverse(nextptr, k);   // Current head will now become the last node of the reversed node. So connecting the remaining list from head->next
        }
        // prev will hold the new head.
        return prev;
    }
    Expected Time Complexity : O(N)
    Expected Auxilliary Space : O(1)
