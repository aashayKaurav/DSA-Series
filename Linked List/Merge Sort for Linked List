//
Given Pointer/Reference to the head of the linked list, the task is to Sort the given linked list using Merge Sort.
Note: If the length of linked list is odd, then the extra node should go in the first list while splitting.

Example 1:

Input:
N = 5
value[]  = {3,5,2,4,1}
Output: 1 2 3 4 5
Explanation: After sorting the given
linked list, the resultant matrix
will be 1->2->3->4->5.
Example 2:

Input:
N = 3
value[]  = {9,15,0}
Output: 0 9 15
Explanation: After sorting the given
linked list , resultant will be
0->9->15.
//

    ** Approach : Same as Merge sort for Arrays
    
    Node* findMid(Node* head) {
        if(head == NULL || head->next == NULL) {
            return head;
        }
        
        Node* slow = head;
        Node* fast = head->next;
        while(fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
    
    Node* merge(Node* left, Node* right) {
        Node* t1 = left;
        Node* t2 = right;
        Node* head = NULL;
        Node* tail = NULL;
        
        while(t1 != NULL && t2 != NULL) {
            if(t1->data <= t2->data) {
                if(head == NULL){
                    head = t1;
                    tail = t1;
                }
                else{
                    tail->next = t1;
                    tail = t1;
                }
                t1 = t1->next;
            }
            else{
                if(head == NULL){
                    head = t2;
                    tail = t2;
                }
                else{
                    tail->next = t2;
                    tail = t2;
                }
                t2 = t2->next;
            }
        }
        while(t1 != NULL) {
            tail->next = t1;
            tail = t1;
            t1 = t1->next;
        }
        while(t2 != NULL) {
            tail->next = t2;
            tail = t2;
            t2 = t2->next;
        }
        return head;
    }    
    
    //Function to sort the given linked list using Merge Sort.
    Node* mergeSort(Node* head) {
        
        //base case
        if(head == NULL || head->next == NULL) {
            return head;
        }
        
        Node* mid = findMid(head);
        Node* left = head;
        Node* right = mid->next;
        mid->next = NULL;
        
        // recursively call for sub lists
        left = mergeSort(left);
        right = mergeSort(right);
        
        Node* result = merge(left, right);
        
        return result;
    }
    T.C : O(N*LogN)
    S.C : O(1)
