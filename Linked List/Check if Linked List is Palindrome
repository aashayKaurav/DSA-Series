//
Given a singly linked list of size N of integers. The task is to check if the given linked list is palindrome or not.

Example 1:

Input:
N = 3
value[] = {1,2,1}
Output: 1
Explanation: The given linked list is
1 2 1 , which is a palindrome and
Hence, the output is 1.
Example 2:

Input:
N = 4
value[] = {1,2,3,4}
Output: 0
Explanation: The given linked list
is 1 2 3 4 , which is not a palindrome
and Hence, the output is 0.
//

    ** Approach : Find the mid of the linked list. Reverse the sub list(mid to end), then start traversing both the sub lists and check whether nodes have same data or not.
    
    Node* reverse(Node* head) {
        if(head == NULL || head->next == NULL) {
            return head;
        }
        
        Node* rev = reverse(head->next);
        
        head->next->next = head;
        
        head->next = NULL;
        
        return rev;
    }
  
    //Function to check whether the list is palindrome.
    bool isPalindrome(Node *head)
    {
        if(head == NULL || head->next == NULL) {
            return true;
        }
        Node* s = head;
        Node* f = head->next;
        
        while(f && f->next) {
            s = s->next;
            f = f->next->next;
        }
        
        Node* rev = reverse(s->next);
        s = head;
        
        while(s && rev) {
            if(s->data != rev->data) {
                return false;
            }
            s = s->next;
            rev = rev->next;
        }
        return true;
    }
    T.C : O(N)
    S.C : O(1)
