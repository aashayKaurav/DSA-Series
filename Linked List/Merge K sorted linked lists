//
Given K sorted linked lists of different sizes. The task is to merge them in such a way that after merging they will be a single sorted linked list.

Example 1:

Input:
K = 4
value = {{1,2,3},{4 5},{5 6},{7,8}}
Output: 1 2 3 4 5 5 6 7 8
Explanation:
The test case has 4 sorted linked 
list of size 3, 2, 2, 2
1st    list     1 -> 2-> 3
2nd   list      4->5
3rd    list      5->6
4th    list      7->8
The merged list will be
1->2->3->4->5->5->6->7->8.
Example 2:

Input:
K = 3
value = {{1,3},{4,5,6},{8}}
Output: 1 3 4 5 6 8
Explanation:
The test case has 3 sorted linked
list of size 2, 3, 1.
1st list 1 -> 3
2nd list 4 -> 5 -> 6
3rd list 8
The merged list will be
1->3->4->5->6->8.
//

    ** Merge 2 at a time Approach : Run a loop and each time merge two linked list.
      Node* merge(Node* head1,Node* head2){
        if(head1 == NULL){
            return head2;
        }
        else if(head2 == NULL){
            return head1;
        }
        if(head1->data < head2->data){
            head1->next = merge(head1->next,head2);
            return head1;
        }
        else{
            head2->next = merge(head2->next,head1);
            return head2;
        }
    }
    
    Node * mergeKLists(Node *arr[], int k)
    {
        Node* ans = new Node(INT_MIN);
        for(int i = 0 ; i < k ; i++){
            ans->next = merge(ans->next,arr[i]);
        }
        return ans->next;
    }
      T.C : O(N*K)
      S.C : O(1)
-----------------------------------------------------------------------------------------------------------------------------------
    ** Approach : We can Use MIN Heap to get the sorted linked list. First put all the starting nodes of each sublist, then take a curr pointer and start traversing.
    If curr->next is present push it into LL. Keep doing untill all the elements from the min heap is done.
    
    Node * mergeKLists(Node *arr[], int K)
    {
        priority_queue<pair<int, Node*>, vector<pair<int, Node*>>, 
        greater<pair<int, Node*>>> mh;
        
        for(int i=0; i<K; i++) {
            mh.push({arr[i]->data, arr[i]});
        }
        Node* head = mh.top().second;
        Node* curr = head;
        while(mh.size() > 0) {
            if(curr->next != NULL) {
                mh.push({curr->next->data, curr->next});
            }
            mh.pop();
            curr->next = mh.top().second;
            curr = curr->next;
        }
        curr->next = NULL;
        
        return head;
    }
    T.C : O(N*KLogK)
    S.C : O(K)
