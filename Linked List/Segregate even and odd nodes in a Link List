//
Given a link list of size N, modify the list such that all the even numbers appear before all the odd numbers in the modified list. 
The order of appearance of numbers within each segregation should be same as that in the original list.

NOTE: Don't create a new linked list, instead rearrange the provided one.

Example 1:

Input: 
N = 7
Link List:
17 -> 15 -> 8 -> 9 -> 2 -> 4 -> 6 -> NULL

Output: 8 2 4 6 17 15 9

Explaination: 8,2,4,6 are the even numbers 
so they appear first and 17,15,9 are odd 
numbers that appear later.

Example 2:

Input:
N = 4
Link List:
1 -> 3 -> 5 -> 7

Output: 1 3 5 7

Explaination: There is no even number. 
So ne need for modification.
//

    ** Approach : Take Two pointers one for even and one for odd. Keep linking the nodes appropriately and later append the odd list to even. Finally return the head
    of the even list.
    
    Node* divide(int N, Node *head){
        
        Node* even = new Node(-1);
        Node* odd = new Node(-1);
        Node* oddHead = odd;
        Node* evenHead = even;
        
        while(head) {
            if(head->data & 1) {
                odd->next = head;
                odd = odd->next;
            }
            else{
                even->next = head;
                even = even->next;
            }
            head = head->next;
        }
        odd->next = NULL;
        even->next = oddHead->next;
        
        return evenHead->next;
    }
    T.C : O(N)
    S.C : O(1)
