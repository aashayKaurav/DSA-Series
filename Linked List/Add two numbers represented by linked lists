//
Given two decimal numbers represented by two linked lists of size N and M respectively. The task is to return a linked list that represents the sum of these two numbers.

For example, the number 190 will be represented by the linked list, 1->9->0->null, similarly 25 by 2->5->null. 
Sum of these two numbers is 190 + 25 = 215, which will be represented by 2->1->5->null. You are required to return the head of the linked list 2->1->5->null.

Example 1:

Input:
N = 2
valueN[] = {4,5}
M = 3
valueM[] = {3,4,5}
Output: 3 9 0  
Explanation: For the given two linked
list (4 5) and (3 4 5), after adding
the two linked list resultant linked
list will be (3 9 0).
Example 2:

Input:
N = 2
valueN[] = {6,3}
M = 1
valueM[] = {7}
Output: 7 0
Explanation: For the given two linked
list (6 3) and (7), after adding the
two linked list resultant linked list
will be (7 0).
//

        ** Approach : We can first reverse both the linked lists. Then keep adding the values from nodes of both the LL and form the resultant LL.
        At last again reverse the resultant LL in order to obtain the final LL.
        
        Node* reverseLL(Node* head){
        if(head == NULL || head->next == NULL){
            return head;
        }
        
        Node* prev = NULL;
        Node* cur = head;
        Node* nt = NULL;
        while(cur != NULL){
            nt = cur->next;
            cur->next = prev;
            prev = cur;
            cur = nt;
        }
        return prev;
        
    }
    
    
    Node* addLL(struct Node* first, struct Node* second){
        int carry = 0;
        
        Node* ansHead = NULL;
        Node* tail = NULL;
        
        while(first != NULL || second != NULL || carry != 0){
            
            int val1 = 0, val2 = 0;     Incase if any LL is over then we will need 0 value.
            
            if(first != NULL){
                val1 = first->data;
            }
            if(second != NULL){
                val2 = second->data;
            }
            
            int sum = carry + val1 + val2;
            int digit = sum%10;
            carry = sum/10;
            Node* temp = new Node(digit);
            
            if(ansHead == NULL) {
                ansHead = temp;
                tail = temp;
            }
            else{
                tail->next = temp;
                tail = tail->next;
            }
            
            if(first != NULL){
                first = first->next;
            }
            if(second != NULL){
                second = second->next;
            }
        }
        return ansHead;
    }
    
    
    
    //Function to add two numbers represented by linked list.
    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
        if(first == NULL && second != NULL) {
            return second;
        }
        if(first != NULL && second == NULL) {
            return first;
        }
        
        first = reverseLL(first);
        second = reverseLL(second);
        
        Node* head = addLL(first, second);
        head = reverseLL(head);
        
        return head;
    }
    T.C : O(N+M)
    S.C : O(max(N+M))   // for the resultant LL
