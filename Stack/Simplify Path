//
Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the 
simplified canonical path.

In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple 
consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.

The canonical path should have the following format:

The path starts with a single slash '/'.
Any two directories are separated by a single slash '/'.
The path does not end with a trailing '/'.
The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')
Return the simplified canonical path.

Example 1:

Input: path = "/home/"
Output: "/home"
Explanation: Note that there is no trailing slash after the last directory name.
Example 2:

Input: path = "/../"
Output: "/"
Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.
//

    ** Approach : The idea is to use stack and split the given path by '/' then the string between two '/' can be '.' (do nothing), '..' (pop from the stack if 
    not empty) else push the folder name into stack. Afterwards We will keep poping the elements from the stack and keep adding infront of ans string with '/'. 
    Return the final ans.
    
    string simplifyPath(string path) {
        string ans = "";
        int n = path.size();
        stack<string> st;
        for(int i=0; i<n; i++) {
            string temp = "";
            if(path[i] == '/') {
                continue;
            }
            while(i < n && path[i] != '/'){
                temp += path[i];
                i++;
            }
            if(temp == ".")
                continue;
            else if(temp == ".."){
                if(!st.empty())
                    st.pop();
            }
            else {
                st.push(temp);
            }
        }
        while(!st.empty()) {
            ans = "/" + st.top() + ans;
            st.pop();
        }
        if(ans.size() == 0) {
            return "/";
        }
        return ans;
    }
    T.C : O(N)
    S.C : O(N)
