//
Find the largest rectangular area possible in a given histogram where the largest rectangle can be made of a number of contiguous bars. 
For simplicity, assume that all bars have the same width and the width is 1 unit, there will be N bars height of each bar will be given by the array arr.

Example 2:

Input:
N = 8
arr[] = {7 2 8 9 1 3 6 5}
Output: 16
Explanation: Maximum size of the histogram 
will be 8  and there will be 2 consecutive 
histogram. And hence the area of the 
histogram will be 8x2 = 16.
//

    **Naive approach : For every histogram keep checking its width i.e. left smaller and right smaller. 
    
    long long getMaxArea(long long arr[], int n)
    {
        long long maxArea = 0;
        for(int i=0; i<n; i++){
            long long minHeight = INT_MAX;
            for(int j=i; j<n; j++){
                minHeight = min(minHeight, arr[j]);
                maxArea = max(maxArea, minHeight * (j-i+1));
            }
        }
        return maxArea;
    }
    T.C : O(N^2) and S.C : O(1)
------------------------------------------------------------------------------------------------------------------------
    **Efficient solution : Precalculate the the left smaller and right smaller (stack will be used) boundaries of the histograms. Then calculate the max area.
    
    long long getMaxArea(long long arr[], int n)
    {
        vector<long long> leftSmaller(n);
        vector<long long> rightSmaller(n);
        stack<long long> st1;
        stack<long long> st2;
        long long maxArea = 0;
        
        // Calculating left smaller
        for(int i=0; i<n; i++){
            while(!st1.empty() && arr[st1.top()] >= arr[i]){
                st1.pop();
            }
            // this means the topmost element in the stack holds the index of just smaller element so the left boundary will be st.top() + 1.
            if(st1.empty() == false){
                leftSmaller[i] = st1.top() + 1;
            }
            else {
                leftSmaller[i] = 0;
            }
            st1.push(i);
        }
        
        // Calculating right smaller
        for(int i=n-1; i>=0; i--){
            while(!st2.empty() && arr[st2.top()] >= arr[i]){
                st2.pop();
            }
            // this means that the topmost element of the stack contains index of the just smaller element so our right boundary becomes st.top() - 1.
            if(st2.empty() == false){
                rightSmaller[i] = st2.top() - 1;
            }
            else{
                rightSmaller[i] = n-1;
            }
            st2.push(i);
        }
        // Tracking the max area.
        for(int i=0; i<n; i++){
            maxArea = max(maxArea, arr[i] * (rightSmaller[i] - leftSmaller[i] + 1));
        }
        return maxArea;
    }
    T.C : O(N) and S.c : O(N)
