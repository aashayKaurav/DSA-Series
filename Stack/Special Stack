//
Design a data-structure SpecialStack that supports all the stack operations like push(), pop(), isEmpty(), isFull() and an additional operation getMin() 
which should return minimum element from the SpecialStack. Your task is to complete all the functions, using stack data-Structure.

Example 1:

Input:
Stack: 18 19 29 15 16
Output: 15
Explanation:
The minimum element of the stack is 15.
//

    int mini;
    void push(stack<int>& s, int a){
    	if(s.empty()){
    	    mini = a;
    	    s.push(a);
    	    return;
    	}
    	else if(a >= mini){
    	    s.push(a);
    	}
    	else{
    	    s.push(2*a - mini);  // encrypted value (a + (a - mini)->negVal)->val will always be less than minimum.
    	    mini = a;
    	}
    }
    
    bool isFull(stack<int>& s,int n){
    	// Your code goes here
    	if(s.size() == n){
    	    return true;
    	}
    	else{
    	    return false;
    	}
    }
    
    bool isEmpty(stack<int>& s){
    	// Your code goes here
    	if(s.empty()){
    	    return true;
    	}
    	else{
    	    return false;
    	}
    }
    
    int pop(stack<int>& s){
    	// Your code goes here
    	if(s.empty())
    	    return -1;
    	    
    	int x;
    	if(s.top() > mini){
    	    x = s.top();
    	    s.pop();
    	    return x;
    	}
    	else{
    	    x = mini;
    	    mini = 2*mini - s.top();
    	    s.pop();
    	    return x;
    	}
    }
    
    int getMin(stack<int>& s){
    	// Your code goes here
    	if(s.empty()){
    	    return -1;
    	}
    	else{
    	    return mini;
    	}
    }
    T.C : O(1)
    S.C : O(1)
