//
    Implementing Stack using Array DS.
//

    #include <bits/stdc++.h>

    using namespace std;
    
    #define MAX 101
    
    class Stack {
        public : 
        
        int top;
        int arr[MAX];
        Stack() {
            top = -1;
        }
        
        bool push(int x) {
            if(top >= MAX-1) {
                cout << "Stack Overflow";
                return false;
            }
            arr[++top] = x;
            cout << "Element pushed : " << x << endl;
            return true;
        }
        int pop() {
            if(top == -1) {
                cout << "Stack Underflow" << endl;
                return -1;
            }
            int x = arr[top--];
            cout << "Element popped : " << x << endl;
            return x;
        }
        int peek() {
            if(top == -1) {
                cout << "Stack is empty" << endl;
                return -1;
            }
            cout << "Stack top element : " << arr[top] << endl;
            return arr[top];
        }
        bool isEmpty() {
            if(top == -1) {
                return true;
            }
            return false;
        }
    };
    
    
    int main() {
        
        class Stack s;
        s.push(10);
        s.push(20);
        s.push(30);
        s.peek();
        s.push(40);
        s.pop();
        cout << "Stack empty : " << s.isEmpty();
        
        return 0;
    }
    T.C : O(1)
    S.C : O(N)
------------------------------------------------------------------------------------------------------
//
    Implementing stack using Linked list DS.
//

    #include <bits/stdc++.h>

    using namespace std;
    
    struct Node {
        int data;
        Node* next;
        
        Node(int data) {
            this->data = data;
            Node* next = NULL;
        }
    };
    
    void push(Node** root, int data) {
        Node* newNode = new Node(data);
        if(*root == NULL) {
            *root = newNode;
            cout << "Element pushed : " << data << endl;;
            return;
        }
        newNode->next = *root;
        *root = newNode;
        cout << "Element pushed : " << data << endl;;
        return;
    }
    
    void printStack(Node* root) {
        if(root == NULL) {
            cout << "Stack is Empty!" << endl;
        }
        Node* curr = root;
        while(curr) {
            cout << curr->data << " ";
            curr = curr->next;
        }
    }
    
    void pop(Node** root) {
        if(root == NULL) {
            cout << "Stack underflow" << endl;
            return;
        }
        Node* temp = *root;
        *root = (*root)->next;
        int popped = temp->data;
        cout << "Element popped : " << popped << endl;
        delete(temp);
        
        return;
    }
    
    void peek(Node* root) {
        if(root == NULL) {
            cout << "Stack is Empty!" << endl;
            return;
        }
        cout << "Top element : " << root->data << endl;
        return;
    }
    
    void isEmpty(Node* root) {
        if(root == NULL) {
            cout << "Stack is empty." << endl;
        }
        cout << "Stack is not empty." << endl;
        
        return;
    }
    
    int main() {
        Node* root = NULL;
        
        push(&root, 1);
        push(&root, 2);
        push(&root, 3);
        push(&root, 4);
        printStack(root);
        pop(&root);
        peek(root);
        
        isEmpty(root);
        
    }
    T.C : O(1)
    S.C : O(1)
