//
Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.

Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
//

string removeKdigits(string num, int k) {
        if(num.size() <= k){
            return "0";
        }
        if(k == 0)
            return num;

        string ans = "";
        stack<char> st;
        st.push(num[0]);
        for(int i=1; i<num.size(); i++){
            // If decreasing order then pop and decrement k.
            while(k > 0 && !st.empty() && num[i] < st.top()){
                st.pop();
                k--;
            }
            st.push(num[i]);
            // popping preceding zeroes.
            if(st.size() == 1 && num[i] == '0'){
                st.pop();
            }
        }
        // if still k>0 then pop from stack.
        while(k && !st.empty()){
            st.pop();
            k--;
        }
        while(st.empty() == false){
            ans += st.top();
            st.pop();
        }
        reverse(ans.begin(), ans.end());
        if(ans.size() == 0){
            return "0";
        }
        return ans;
    }
