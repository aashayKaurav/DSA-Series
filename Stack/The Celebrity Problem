//
A celebrity is a person who is known to all but does not know anyone at a party. If you go to a party of N people, find if there is a celebrity in the party or not.
A square NxN matrix M[][] is used to represent people at the party such that if an element of row i and column j  is set to 1 it means ith person knows jth person. 
Here M[i][i] will always be 0.
Note: Follow 0 based indexing.
Follow Up: Can you optimize it to O(N)

Example 1:

Input:
N = 3
M[][] = {{0 1 0},
         {0 0 0}, 
         {0 1 0}}
Output: 1
Explanation: 0th and 2nd person both
know 1. Therefore, 1 is the celebrity. 

Example 2:

Input:
N = 2
M[][] = {{0 1},
         {1 0}}
Output: -1
Explanation: The two people at the party both
know each other. None of them is a celebrity.
//

    ** Approach : Find the inDegree and outDegree of each index and store them seperately. After that run a for loop and check if an index has inDegree == n-1 and 
    outDegree == 0 then reti=urn index else return -1;
    int findCelebrity(int n)
    {       
        int indegree[n] = { 0 }, outdegree[n] = { 0 };
  
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int x = knows(i, j);
     
                // set the degrees
                outdegree[i] += x;
                indegree[j] += x;
            }
        }
     
        // find a person with indegree n-1
        // and out degree 0
        for (int i = 0; i < n; i++)
            if (indegree[i] == n - 1 && outdegree[i] == 0)
                return i;
     
        return -1;
    }
    T.C : O(N^2)
    S.C : O(N)
--------------------------------------------------------------------------------------------------------------
    ** Two Pointer Approach : Here we will first try to find a potentialCandidate as a celebrity(Try to minimize the search space i.e if i knows j then i++ else j--). 
    Then run a loop to check whether all the contraint to be a celebrity match or not.
    int celebrity(vector<vector<int> >& M, int n) {
        int i=0, j=n-1;
        
        while(i < j){
            if(M[i][j] == 1){
                i++;
            }
            else{
                j--;
            }
        }
        int potentialCandidate = i;
        for( int i=0; i<n; i++){
            if((M[potentialCandidate][i] != 0) || ((M[i][potentialCandidate] != 1) && (i != potentialCandidate))){
                return -1;
            }
        }
        return potentialCandidate;
    }
    T.C : O(N)
    S.C : O(1)
