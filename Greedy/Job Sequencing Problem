//
Given a set of N jobs where each jobi has a deadline and profit associated with it.

Each job takes 1 unit of time to complete and only one job can be scheduled at a time. We earn the profit associated with job if and only if the 
job is completed by its deadline.

Find the number of jobs done and the maximum profit.

Note: Jobs will be given in the form (Jobid, Deadline, Profit) associated with that Job.

Example 1:

Input:
N = 4
Jobs = {(1,4,20),(2,1,10),(3,1,40),(4,1,30)}
Output:
2 60
Explanation:
Job1 and Job3 can be done with
maximum profit of 60 (20+40).
//

    ** Approach : We will first sort the array in decreasing order of their profit. Then keep adding job and try to place the job at as last as possible.
    /*
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/
static bool cmp(Job &a, Job &b) {
    return a.profit > b.profit;
}
class Solution 
{
    public:
    //Function to find the maximum profit and the number of jobs done.
    vector<int> JobScheduling(Job arr[], int n) 
    {
        sort(arr, arr+n, cmp);
        vector<int> ans;
        int deadMax = 0, maxProfit = 0, count=0;
        for(int i=0; i<n; i++) {
            deadMax = max(deadMax, arr[i].dead);
        }
        vector<int> deadline(deadMax, -1);
        for(int i=0; i<n; i++) {
            for(int j=arr[i].dead-1; j>=0; j--) {
                if(deadline[j] == -1) {
                    deadline[j] = 1;
                    maxProfit += arr[i].profit;
                    count++;
                    break;
                }
            }
        }
        ans.push_back(count);
        ans.push_back(maxProfit);
        return ans;
    } 
};
T.C : O(NlogN)
S.C : O(N)
