//
Given three stacks S1, S2, and S3 of the positive numbers, the task is to find the possible equal maximum sum of the stacks with the removal of top elements 
allowed. Stacks are represented as an array, and the first index of the array represents the top element of the stack.

Example 1:

Input:
N1 = 3, N2 = 4, N3 = 2
S1 = {4,2,3}
S2 = {1,1,2,3}
S3= {1,4}
Output:
5
Explanation:
We can pop 1 element from the 1st stack, and 2
elements from the 2nd stack. Now remaining elements
yield the equal sum of the three stacks, that is 5.
 

Example 2:

Input:
N1 =2, N2 = 1, N3 = 3
S1 = {4,7}
S2 = {10}
S3 = {1,2,3}
Output:
0
Explanation:
We will never get an equal sum after popping
some elements, so the answer will be 0.
//

    ** Approach : The main ideal is to make their sum equal. So why not accumulate each stack's sum then keep on comparing whether their sum is equal or not until
    they are equal.
    
    int maxEqualSum(int N1,int N2,int N3,vector<int> &S1,vector<int> &S2,vector<int> &S3){
        int sum1 = 0, sum2 = 0, sum3 = 0;
        sum1 = accumulate(S1.begin(), S1.end(), sum1);
        sum2 = accumulate(S2.begin(), S2.end(), sum2);
        sum3 = accumulate(S3.begin(), S3.end(), sum3);
        int i=0, j=0, k=0;
        while(i < N1 && j < N2 && k < N3) {
            if(sum1 == sum2 && sum2 == sum3){
                return sum1;
            }
            if(sum1 >= sum2 && sum1 >= sum3) {
                sum1 -= S1[i];
                i++;
            }
            else if(sum2 >= sum1 && sum2 >= sum3) {
                sum2 -= S2[j];
                j++;
            }
            else {
                sum3 -= S3[k];
                k++;
            }
        }
        return 0;
    }
    T.C : O(N)
    S.C : O(1)
