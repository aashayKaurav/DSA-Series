//
Given weights and values of N items, we need to put these items in a knapsack of capacity W to get the maximum total value in the knapsack.
Note: Unlike 0/1 knapsack, you are allowed to break the item. 

Example 1:

Input:
N = 3, W = 50
values[] = {60,100,120}
weight[] = {10,20,30}
Output:
240.00
Explanation:Total maximum value of item
we can have is 240.00 from the given
capacity of sack.
//

    ** Approach : We will calculate value/weight and sort them in decreasing order. Then greedyly we will pick items from starting and add the value to ans 
    and decrement the W. If W is less then the weight of cuurent item then we will take fractional value...
    
    static bool cmp(pair<double, Item> &a, pair<double, Item> &b) {
    return a.first > b.first;
}
class Solution
{
    public:
    
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n)
    {
        vector<pair<double, Item>> vec;
        double ans = 0;
        for(int i=0; i<n; i++) {
            double temp = (1.0)*arr[i].value / arr[i].weight;
            vec.push_back({temp, arr[i]});
        }
        sort(vec.begin(), vec.end(), cmp);
        for(int i=0; i<n; i++) {
            if(W == 0){
                break;
            }
            if(W >= vec[i].second.weight){
                ans += vec[i].second.value;
                W -= vec[i].second.weight;
            }
            else {
                ans += W*vec[i].first;
                W = 0;
            }
        }
        
        return ans;
    }
        
};
