//
A board of length M and width N is given. The task is to break this board into M * N squares such that cost of breaking is minimum. 
The cutting cost for each edge will be given for the board in two arrays X[] and Y[]. In short, you need to choose such a sequence of cutting such that cost 
is minimized. Return the minimized cost.

Example 1:

Input:
M = 6. N = 4
X[] = {2, 1, 3, 1, 4}
Y[] = {4, 1, 2}
Output: 42
Explanation: 

For above board optimal way to cut into square is:
Total minimum cost in above case is 42. It is 
evaluated using following steps.
Initial Value : Total_cost = 0
Total_cost = Total_cost + edge_cost * total_pieces
Cost 4 Horizontal cut:      Cost = 0 + 4*1 = 4
Cost 4 Vertical cut:        Cost = 4 + 4*2 = 12
Cost 3 Vertical cut:        Cost = 12 + 3*2 = 18
Cost 2 Horizontal cut:      Cost = 18 + 2*3 = 24
Cost 2 Vertical cut:        Cost = 24 + 2*3 = 30
Cost 1 Horizontal cut:      Cost = 30 + 1*4 = 34
Cost 1 Vertical cut:        Cost = 34 + 1*4 = 38
Cost 1 Vertical cut:        Cost = 38 + 1*4 = 42
//

    ** Approach : The main thing is to keep track of horizontal and vertical cuts at each step. Also if we observe then when we cut vertically, horizontal_cuts get 
    incremented and when we cut horizontaly, vertical_cuts get incremented. Apart from this if we cut maximum cost edge first then we will have minimum totalCost 
    since the number of cuts will be less at initial stage (Greedy).
    
    int minimumCostOfBreaking(vector<int> X, vector<int> Y, int M, int N){
        sort(X.begin(), X.end(), greater<int>());
        sort(Y.begin(), Y.end(), greater<int>());
        
        int horizontalPieces = 1, verticalPieces = 1;
        int i = 0, j = 0, totalCost=0;
        while(i<X.size() && j<Y.size()) {
            if(X[i] > Y[j]) {
                totalCost += verticalPieces*X[i];
                horizontalPieces++;
                i++;
            }
            else {
                totalCost += horizontalPieces*Y[j];
                verticalPieces++;
                j++;
            }
        }
        while(i < X.size()) {
            totalCost += verticalPieces*X[i];
            horizontalPieces++;
            i++;
        }
        while(j < Y.size()) {
            totalCost += horizontalPieces*Y[j];
            verticalPieces++;
            j++;
        }
        return totalCost;
    }
    T.C : O(MLogM + NLogN)
    S.C : O(1)
