//
Given an array A[]. The task is to find the maximum product possible with the subset of elements present in the array. 
The maximum product can be a single element also.
Since the product can be large, return it modulo (109 + 7).

Example 1:

Input:
A[] = {-1, -1, -2, 4, 3}
Output: 24
Explanation: Maximum product will be ( -2 * -1 * 4 * 3 ) = 24

Example 2:

Input:
A[] = {-1, 0}
Output: 0
//

    ** Approach : Simply multiply every thing except zero, maintain the count of zeroes, negative numbers and minimum Absolute value. After the traversal check 
    whether the number of negNums are odd or not. If not return ans, otherwise divide ans by minAbsolute and return ans.
    
    long long int findMaxProduct(vector<int>&a, int n){
        int negNums = 0;
        int zeroes = 0;
        int minAbs = INT_MIN;
        long long int ans = 1;
        
        if(n == 1){
            return a[0];
        }
        
        for(int i=0; i<n; i++){
            
            if(a[i] == 0){
                zeroes++;
                continue;
            }
            if(a[i] < 0) {
                negNums++;
                minAbs = max(minAbs, a[i]);
            }
            ans = (ans * (long long int)a[i]) % 1000000007;
        }
        
        if(zeroes == n)
            return 0;
        
        if(negNums&1){
            if(negNums==1 && zeroes > 0 && negNums+zeroes==n)
                return 0;
            ans = ans/minAbs;
        }
        return ans;
    }
    T.C : O(N)
    S.C : O(1)
