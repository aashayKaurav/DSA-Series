//
Given an array of integers of size N and a number K., You must modify array arr[] exactly K number of times. 
Here modify array means in each operation you can replace any array element either arr[i] by -arr[i] or -arr[i] by arr[i]. 
You need to perform this operation in such a way that after K operations, the sum of the array must be maximum.

Example 1:

Input:
N = 5, K = 1
arr[] = {1, 2, -3, 4, 5}
Output:
15
Explanation:
We have k=1 so we can change -3 to 3 and
sum all the elements to produce 15 as output.

Example 2:

Input:
N = 10, K = 5
arr[] = {5, -2, 5, -4, 5, -12, 5, 5, 5, 20}
Output:
68
Explanation:
Here  we have k=5 so we turn -2, -4, -12 to
2, 4, and 12 respectively. Since we have
performed 3 operations so k is now 2. To get
maximum sum of array we can turn positive
turned 2 into negative and then positive
again so k is 0. Now sum is
5+5+4+5+12+5+5+5+20+2 = 68
//

    ** Approach : First we will sort the array and keep updating a[i] as positive if it is negative and decrement the k. After that if k value is greater than 0
    and odd then we will take the absolute minimum element from the array and total -= 2*minEle, otherwise return total.
    
    long long int maximizeSum(long long int a[], int n, int k)
    {
        sort(a, a+n);
        long long int total = 0, minEle = INT_MAX;
        for(int i=0; i<n; i++) {

            if(a[i] < 0 && k) {
                a[i] = -1*a[i];
                k -= 1;
            }
            minEle = min(minEle, abs(a[i]));
            total += a[i];
        }
        if(k == 0)
            return total;
        if(k&1)
            total -= 2*minEle;
        return total;
    }
    T.C : O(NLogN)
    S.C : O(1)
    
    
