//
Given a boolean 2D array of n x m dimensions where each row is sorted. Find the 0-based index of the first row that has the maximum number of 1's.

Example 1:

Input: 
N = 4 , M = 4
Arr[][] = {{0, 1, 1, 1},
           {0, 0, 1, 1},
           {1, 1, 1, 1},
           {0, 0, 0, 0}}
Output: 2
Explanation: Row 2 contains 4 1's (0-based
indexing).
//
    **Approach : Go to each row and apply binary search algorithm to find the first index having 1. Then return that index value so thereby #Colomns - index
    will give us total number of 1's in that row. So keep comparing with the ans and finall return the ans.
    
    int binarySearch(vector<int> temp, int low, int high){
        while(low <= high){
            int mid = low + (high-low)/2;
            if((temp[mid] == 1) && (mid == 0 || temp[mid-1] == 0)){
                return mid;
            }
            else if(temp[mid] == 0){
                return binarySearch(temp, mid+1, high);
            }
            else{
                return binarySearch(temp, low, mid-1);
            }
        }
        return -1;
    }

	int rowWithMax1s(vector<vector<int> > arr, int n, int m) {
	    int rowIndex = -1, maxOnes = -1;
	    int i, index;
	    for(i = 0 ; i < n; i++){
	        index = binarySearch(arr[i], 0, m-1);
	        if(index != -1 && m-index > maxOnes){
	            maxOnes = m-index;
	            rowIndex = i;
	        }
	    }
	    return rowIndex;
	}
	T.C : O(N*LogM)
	S.C : O(1)
---------------------------------------------------------------------------------------------------------------------------------------------------

	Optimal Approach : Traverse each column and since the rows are sorted thereby getting the first '1' will give our row number having max 1's
	
	int rowWithMax1s(vector<vector<int> > arr, int n, int m) {
	    for(int i=0; i<m; i++) {
	        for(int j=0; j<n; j++) {
	            if(arr[j][i] == 1) {
	                return j;
	            }
	        }
	    }
	    return -1;
	}
	T.C : O(N+M)
	S.C : O(1)
