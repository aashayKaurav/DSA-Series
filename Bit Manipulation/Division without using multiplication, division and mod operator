//
Given two integers dividend and divisor. Find the quotient after dividing dividend by divisor without using multiplication, division and mod operator.

Example 1:

Input:
a = 10, b= 3
Output: 3
Exaplanation:
10/3 gives quotient as 3 
and remainder as 1.
//

  ** APPROACH : Keep subtracting the divisor from the dividend until the dividend becomes less than the divisor.
  long long divide(long long dividend, long long int divisor)
{
 
    // Calculate sign of divisor i.e.,
    // sign will be negative only if
    // either one of them is negative
    // otherwise it will be positive
    long long sign = ((dividend < 0) ^ (divisor < 0)) ? -1 : 1;
 
    // Update both divisor and
    // dividend positive
    dividend = abs(dividend);
    divisor = abs(divisor);
 
    // Initialize the quotient
    long long quotient = 0;
    while (dividend >= divisor) {
        dividend -= divisor;
        ++quotient;
    }
 
    // Return the value of quotient with the appropriate
    // sign.
    return quotient * sign;
}

** EFFICIENT APPROACH : dividend = divisor * quotient + remainder.
long long divide(long long dividend, long long divisor) 
    {
        int sign = ((dividend < 0 ) ^ (divisor < 0)) ? -1 : 1;
        dividend = abs(dividend);
        divisor = abs(divisor);
        long long quotient = 0, temp = 0;
        for(int i=31; i>=0; i--){
            if(temp + (divisor << i) <= dividend){
                temp += (divisor << i);
                // Pushing the bit using bitwise or operation till the condition is satisfied.
                quotient |= (1 << i);
            }
        }
        
        return quotient * sign;
    }
