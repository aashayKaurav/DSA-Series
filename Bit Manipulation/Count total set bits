//
You are given a number N. Find the total count of set bits for all numbers from 1 to N(both inclusive).

Example 1:

Input: N = 4
Output: 5
Explanation:
For numbers from 1 to 4.
For 1: 0 0 1 = 1 set bits
For 2: 0 1 0 = 1 set bits
For 3: 0 1 1 = 2 set bits
For 4: 1 0 0 = 1 set bits
Therefore, the total set bits is 5.
//
    ***INTUTION : 2^(x-1)*x + (n - 2^x + 1) + solve(n - 2^x) where x is the highest power of 2 within n. 
    // First we calculate all set bits which are in range of 2^x => (2^x / 2) multipled by number of digits (x);
    // Then we are left with n - 2^x + 1 numbers and all these numbers will have MSB set so include in ans.
    // Lastly subtract 2^x from n and call recusive function to get set bits of remaining numbers.
    // T.C. = O(log n)
    int greatestPowOf2(int n){
            int x = 0;
            while((1<<x) <= n){
                x++;
            }
            return x-1;
        }
    
    
    int countSetBits(int n)
    {
        if(n == 0)
            return 0;
        
        int x = greatestPowOf2(n);
        // 2^(x-1) * x
        int tillPowOf2 = x * (1<<(x-1));
        // n - 2^x + 1
        int rem = n - (1<<x) + 1;
        // n - 2^x
        int reduced = countSetBits(n-(1<<x));
        
        return tillPowOf2 + rem + reduced;
    }
