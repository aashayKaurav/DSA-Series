//
Suppose there is a circle. There are N petrol pumps on that circle. You will be given two sets of data.
1. The amount of petrol that every petrol pump has.
2. Distance from that petrol pump to the next petrol pump.
Find a starting point where the truck can start to get through the complete circle without exhausting its petrol in between.
Note :  Assume for 1 litre petrol, the truck can go 1 unit of distance.

Example 1:

Input:
N = 4
Petrol = 4 6 7 4
Distance = 6 5 3 5
Output: 1
Explanation: There are 4 petrol pumps with
amount of petrol and distance to next
petrol pump value pairs as {4, 6}, {6, 5},
{7, 3} and {4, 5}. The first point from
where truck can make a circular tour is
2nd petrol pump. Output in this case is 1
(index of 2nd petrol pump).
//

    ** Brute Approach : Check for every index whether it can be a starting petrolPump or not.
    int tour(petrolPump p[],int n)
    {
        
        for(int i=0; i<n; i++) {
            int j = i;
            int totalPetrol = 0;
            int numberOfPP = 0;
            while(numberOfPP < n) {
                totalPetrol += p[j].petrol;
                if(totalPetrol < p[j].distance) {
                    break;
                }
                totalPetrol -= p[j].distance;
                numberOfPP++;
                j = (j+1)%n;
            }
            if(numberOfPP == n){
                return i;
            }
        }
        return -1;
    }
    T.C : O(N^2)
    S.C : O(1)
--------------------------------------------------------------------------------------------------------------------------------
    ** Approach : We will traverse the petrolPumps and keep adding the balance amount but if balance < 0 that means till this index we cannot have a starting pump so we
    will update the start = i+1. And finally we will check whether deficit(requiredAmount) + balance >= 0 or not if so then start is the ans else return -1.
    int tour(petrolPump p[],int n)
    {
        int requiredAmount = 0;
        int balance = 0;
        int start = 0;
        
        for(int i=0; i<n; i++) {
            balance += p[i].petrol - p[i].distance;
            if(balance < 0) {
                requiredAmount += balance;
                balance = 0;
                start = i+1;
            }
        }
        if(balance+requiredAmount >= 0) {
            return start;
        }
        return -1;
    }
    T.C : O(N)
    S.C : O(1)
