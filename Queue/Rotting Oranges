//
You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

Example 1:

Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.
//

    ** Approach : We will have to perform BFS traversal.
    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> visited(m, vector<int>(n, 0));
        queue<pair<pair<int, int>, int>> q;
        int ans = 0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 2){
                    q.push({{i, j}, 0});
                    visited[i][j] = 1;
                }
            }
        }
        // BFS
        while(!q.empty()){
            
            int r = q.front().first.first;
            int c = q.front().first.second;
            int t = q.front().second;
            ans = max(ans, t);
            q.pop();
            if(r-1>=0 && !visited[r-1][c] && grid[r-1][c] == 1){
                q.push({{r-1, c}, t+1});
                visited[r-1][c] = 1;
            }
            if(r+1 < m && !visited[r+1][c] && grid[r+1][c] == 1){
                q.push({{r+1, c}, t+1});
                visited[r+1][c] = 1;
            }
            if(c-1 >=0 && !visited[r][c-1] && grid[r][c-1] == 1){
                q.push({{r, c-1}, t+1});
                visited[r][c-1] = 1;
            }
            if(c+1 < n && !visited[r][c+1] && grid[r][c+1] == 1){
                q.push({{r, c+1}, t+1});
                visited[r][c+1] = 1;
            }
        }
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(visited[i][j] == 0 && grid[i][j] == 1)
                    return -1;
            }
        }
        return ans;
    }
    T.C : O(M*N)
    S.C : O(M*N)
