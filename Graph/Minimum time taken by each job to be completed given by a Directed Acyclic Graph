//
Given a Directed Acyclic Graph having V vertices and E edges, where each edge {U, V} represents the Jobs U and V such that Job V can only be started 
only after completion of Job U. The task is to determine the minimum time taken by each job to be completed where each Job takes unit time to get completed.

Example 1:

Input:
N=10
M=13
edges[]={{1,3},{1,4},{1,5},{2,3},{2,8},{2,9},{3,6},{4,6},{4,8},{5,8},{6,7},{7,8},{8,10}}
Output:
time[]={1,1,2,2,2,3,4,5,2,6 }
Explanation:
Start jobs 1 and 2 at the beginning and complete them at 1 unit of time. 
Since, all the jobs on which need to be completed before the jobs 3, 4, 5, and 9 are completed. So, we can start these jobs at 1st unit of time 
and complete these at 2nd unit of time after the completion of the dependent Job.
Similarly, 
Job 6 can only be done after the 3rd and 4th jobs are done. So, start it at the 2nd unit of time and complete it at the 3rd unit of time.
Job 7 can only be done after job 6 is done. So, you can start it at the 3rd unit of time and complete it at the 4th unit of time.
Job 8 can only be done after the 4th, 5th, and 7th jobs are done. So, start it at the 4th unit of time and complete it at the 5th unit of time.
Job 10 can only be done after the 8th job is done. So, start it at the 5th unit of time and complete it at the 6th unit of time.
//

    ** Approach: The idea is simple, we have to apply topological sort algo and take a ans vector to store the end time of each job.
    vector<int> minimumTime(int n,vector<vector<int>> &edges,int m)
        {
            vector<int> inDegree(n+1, 0);
            vector<int> adj[n+1];
            vector<int> ans(n, 0);
            for(int i=0; i<m; i++) {
                int u = edges[i][0];
                int v = edges[i][1];
                adj[u].push_back(v);
                inDegree[v]++;
            }
            
            queue<int> q;
    
            for(int i=1; i<=n; i++) {
                if(inDegree[i] == 0){
                    q.push(i);
                    ans[i-1] = 1;
                }
            }
            
            while(!q.empty()){
                int node = q.front();
                q.pop();
                
                for(auto it : adj[node]){
                    inDegree[it]--;
                    if(inDegree[it] == 0){
                        ans[it-1] = ans[node-1] + 1;
                        q.push(it);
                    }
                }
            }
            return ans;
        }
        T.C : O(N + M)
        S.C : O(N)
