//
Given an undirected graph with V vertices. 
We say two vertices u and v belong to a single province if there is a path from u to v or v to u. Your task is to find the number of provinces.

Note: A province is a group of directly or indirectly connected cities and no other cities outside of the group.

Example 1:

Input:
[
 [1, 0, 1],
 [0, 1, 0],
 [1, 0, 1]
]

Output:
2
Explanation:
The graph clearly has 2 Provinces [1,3] and [2]. As city 1 and city 3 has a path between them they belong to a single province. 
City 2 has no path to city 1 or city 3 hence it belongs to another province.
//

class DisjointSet{
    vector<int> rank;
    vector<int> size;
    vector<int> parent;
    
    public:
    
    DisjointSet(int V){
        rank.resize(V+1, 0);
        parent.resize(V+1, 0);
        size.resize(V+1, 1);
        for(int i=0; i<V; i++){
            parent[i] = i;
        }
    }
    
    int findUParent(int u){
        if(u == parent[u]){
            return u;
        }
        return parent[u] = findUParent(parent[u]);
    }
    
    void unionByRank(int u, int v){
        int ulp_u = findUParent(u);
        int ulp_v = findUParent(v);
        
        if(ulp_u == ulp_v){
            return;
        }
        else if(rank[ulp_u] < rank[ulp_v]){
            parent[ulp_u] = ulp_v;
        }
        else if(rank[ulp_v] < rank[ulp_u]){
            parent[ulp_v] = ulp_u;
        }
        else{
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }
    
    void unionBySize(int u, int v){
        int ulp_u = findUParent(u);
        int ulp_v = findUParent(v);
        if(ulp_u == ulp_v){
            return;
        }
        else if(size[ulp_u] < size[ulp_v]){
            parent[ulp_u] = ulp_v;
        }
        else if(size[ulp_v] < size[ulp_u]){
            parent[ulp_v] = ulp_u;
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u]++;
        }
    }
    
};
      ***INTUTION : Create the Graph using Disjoint Set data structure (using anyone unionBySize/unionByRank) then simple count 
      whether ultimateParent[u] == u if true then increment the count otherwise continue !!
int numProvinces(vector<vector<int>> adj, int V) {
        DisjointSet ds(V+1);
        for(int i=0; i<V; i++){
            for(int j =0; j<V; j++){
                if(adj[i][j] == 1){
                    // edge between i and j.
                    ds.unionBySize(i, j);
                }
            }
        }
        int cnt = 0;
        for(int i=0; i<V; i++){
            if(ds.findUParent(i) == i){
                cnt++;
            }
        }
            
        return cnt;
    }
