//
Given start, end and an array arr of n numbers. At each step, start is multiplied with any number in the array and then mod operation with 100000 
is done to get the new start.

Your task is to find the minimum steps in which end can be achieved starting from start. If it is not possible to reach end, then return -1.

Example 1:

Input:
arr[] = {2, 5, 7}
start = 3, end = 30
Output:
2
Explanation:
Step 1: 3*2 = 6 % 100000 = 6 
Step 2: 6*5 = 30 % 100000 = 30
//

int minimumMultiplications(vector<int>& arr, int start, int end) {
        // We can solve this question using priority_queue as well as simple queue, since the steps are linearly increasing.
        vector<int> dist(100000, INT_MAX);
        queue<pair<int, int>> q;
        dist[start] = 0;
        // {steps, num}
        q.push({0, start});
        
        while(!q.empty()){
            auto i = q.front();
            int steps = i.first;
            int node = i.second;
            q.pop();
            
            for(int i=0; i<arr.size(); i++){
                int newNode = (node * arr[i]) % 100000;
                if(newNode == end)
                    return steps + 1;
                if(steps + 1 < dist[newNode]){
                    dist[newNode] = steps + 1;
                    q.push({steps + 1, newNode});  
                }
            }
        }
        
        return -1;
    }
