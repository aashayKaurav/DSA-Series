//
Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.

The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).

Example 1:

Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.
//

    **Approach : We can try to cover all nodes from 0 to n-1 using DFS/BFS and taking a temporary path vector which will store all the nodes on the way.
    At the base case we will check wheather we have reached (n-1)th node or not. And if we have reached then simply store the path into ans.
    And most IMP step will be to back track all the steps inorder to get other possibilities of path.
    
    void dfs(int node, vector<vector<int>>& graph, vector<vector<int>>& ans,
    vector<int> &vis, vector<int> &path){

        vis[node] = 1;
        path.push_back(node);
        if(node == graph.size()-1) {
            ans.push_back(path);
            path.pop_back();
            vis[node] = 0;
            return;
        }
        for(auto it : graph[node]){
            if(!vis[it]){
                dfs(it, graph, ans, vis, path);
            }
        }
        path.pop_back();
        vis[node] = 0;
    }

    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        vector<vector<int>> ans;
        vector<int> vis(graph.size(), 0);
        vector<int> path;
        dfs(0, graph, ans, vis, path);

        return ans;
    }
    T.C : O(2^N) since we are checking all possibilities of of a node to be the part of the path or not.
    S.C : O(1)
