//
Given a reference of a node in a connected undirected graph.

Return a deep copy (clone) of the graph.

Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.

class Node {
    public int val;
    public List<Node> neighbors;
}
 

Test case format:

For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. 
The graph is represented in the test case using an adjacency list.

An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.

The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.

Example 1:

Input: adjList = [[2,4],[1,3],[2,4],[1,3]]
Output: [[2,4],[1,3],[2,4],[1,3]]
Explanation: There are 4 nodes in the graph.
1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).
3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).
//

    ** Approach : To make sure that we are not repeatedly creating nodes of the graph we will use visited array of Node*. After that we will first create a node of 
    clone graoh and call DFS/BFS inorder to traverse all the nodes of the graph and simultaneously keep creating the nodes of the graph whose if not created already.
    And also keep pushing the adj nodes in the neighbor of the nodes.
    
    /*
    // Definition for a Node.
    class Node {
    public:
        int val;
        vector<Node*> neighbors;
        Node() {
            val = 0;
            neighbors = vector<Node*>();
        }
        Node(int _val) {
            val = _val;
            neighbors = vector<Node*>();
        }
        Node(int _val, vector<Node*> _neighbors) {
            val = _val;
            neighbors = _neighbors;
        }
    };
    */

    class Solution {
    public:
        void dfs(Node *node, Node *copy, vector<Node*> &vis) {
            vis[copy->val] = copy;
            for(auto x : node->neighbors) {
                if(vis[x->val] == NULL) {
                    Node *newNode = new Node(x->val);
                    (copy->neighbors).push_back(newNode);
                    dfs(x, newNode, vis);
                }
                else {
                    (copy->neighbors).push_back(vis[x->val]);
                }
            }
        }

        Node* cloneGraph(Node* node) {
            if(node == NULL)
                return NULL;

            vector<Node *> vis(101, NULL);
            Node *copy = new Node(node->val);
            dfs(node, copy, vis);
            return copy;
        }
    };
    T.C : O(N + E)
    S.C : O(N)
