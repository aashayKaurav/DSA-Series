//
Given a grid of size n*m (n is the number of rows and m is the number of columns in the grid) consisting of '0's (Water) and '1's(Land). Find the number of islands.

Note: An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically or diagonally i.e., in all 8 directions.

Example 1:

Input:
grid = {{0,1},{1,0},{1,1},{1,0}}
Output:
1
Explanation:
The grid is-
0 1
1 0
1 1
1 0
All lands are connected.
//

    **Approach : We just need to count the number of connected components and for that we are using DFS algo.
    
int dr[] = {-1, -1, 0, +1, +1, +1, 0, -1};
int dc[] = {0, +1, +1, +1, 0, -1, -1, -1};

class Solution {
  public:
    
    void dfs(vector<vector<int>> &vis, int i, int j) {
        if(i < 0 || i >= vis.size() || j < 0 || j >= vis[0].size()) {
            return;
        }
        vis[i][j] = 0;
        for(int k=0; k<8; k++) {
            int row = i + dr[k];
            int col = j + dc[k];
            if(row >= 0 && row < vis.size() && col >= 0 && 
            col < vis[0].size() && vis[row][col] == 1){
                dfs(vis, row, col);
            }
        }
    }
  
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        int numOfIslands = 0;
        vector<vector<int>> vis(n, vector<int>(m, 0));
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(grid[i][j] == '1'){
                    vis[i][j] = 1;
                }
            }
        }
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(vis[i][j] == 1){
                    dfs(vis, i, j);
                    numOfIslands++;
                }
            }
        }
        return numOfIslands;
    }
};
T.C : O(N*M) In worst case we need to traverse every cell.
S.C : O(N*M) We are not modifying the given grid and using our own.
