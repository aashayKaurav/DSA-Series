//
There are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] 
represents a connection between servers ai and bi. Any server can reach other servers directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some servers unable to reach some other server.

Return all critical connections in the network in any order.

Example 1:

Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.
//

    ** Approach : Using Tarjan's Algorithm (time in and low time) to find the bridges in the graph.
    Step 1. Keep updating the insertion time and low time of the nodes using DFS.
    Step 2. When backtracking only update the low time of the nodes as min low time apart from parent : low[node] = min(low[node], low[it]);
    Step 3. Keep check if(low[it] > tin[node]) that mean there is no other way to reach parent. Hence a bridge.

    int timer = 1;

    void dfs(int node, int parent, vector<int> adj[], vector<int> &vis, int tin[], int low[], vector<vector<int>> &bridges) {
        vis[node] = 1;
        tin[node] = low[node] = timer;
        timer++;

        for(auto it : adj[node]) {

            if(it == parent)
                continue;
            if(vis[it] == 0) {
                dfs(it, node, adj, vis, tin, low, bridges);
                low[node] = min(low[node], low[it]);

                if(low[it] > tin[node]) {
                    bridges.push_back({it, node});
                }
            }
            else {
                low[node] = min(low[node], low[it]);
            }
        }

    }

    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        vector<int> adj[n];
        for(int i=0; i<connections.size(); i++) {
            int u = connections[i][0];
            int v = connections[i][1];

            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        int tin[n], low[n];
        vector<vector<int>> bridges;
        vector<int> vis(n);

        dfs(0, -1, adj, vis, tin, low, bridges);

        return bridges;
    }
    T.C : O(V + E)
    S.C : O(V)
