//
Given a weighted, undirected and connected graph of V vertices and an adjacency list adj where adj[i] is a list of lists containing two integers 
where the first integer of each list j denotes there is edge between i and j , second integers corresponds to the weight of that  edge.
You are given the source vertex S and You to Find the shortest distance of all the vertex's from the source vertex S. 
You have to return a list of integers denoting shortest distance between each node and Source vertex S.

Note: The Graph doesn't contain any negative weight cycle.

Example 2:

Input:
V = 3, E = 3
adj = {{{1, 1}, {2, 6}}, {{2, 3}, {0, 1}}, {{1, 3}, {0, 6}}}
S = 2
Output:
4 3 0 
//


vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        vector<int> dist(V, INT_MAX);
        dist[S] = 0;
        set<pair<int, int>> st;
        st.insert({0, S});
        while(!st.empty()){
            auto t = *(st.begin());
            int node = t.second;
            int d = t.first;
            st.erase(t);
            
            for(auto it : adj[node]){
                int adjNode = it[0];
                int edgeWeight = it[1];
                if(d + edgeWeight < dist[adjNode]){
                // erase from the set if it the has been already modified before....
                // because there is no use in keeping it into set since we got a better path !!
                    if(dist[adjNode] != INT_MAX){
                        st.erase({dist[adjNode], adjNode});
                    }
                    dist[adjNode] = d + edgeWeight;
                    st.insert(dist[adjNode], adjNode);
                }
            }
        }
        return dist;
    }
