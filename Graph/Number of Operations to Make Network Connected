//
There are n computers numbered from 0 to n - 1 connected by ethernet cables connections forming a network where connections[i] = [ai, bi] 
represents a connection between computers ai and bi. Any computer can reach any other computer directly or indirectly through the network.

You are given an initial computer network connections. You can extract certain cables between two directly connected computers, 
and place them between any pair of disconnected computers to make them directly connected.

Return the minimum number of times you need to do this in order to make all the computers connected. If it is not possible, return -1.

Example 1:

Input: n = 4, connections = [[0,1],[0,2],[1,2]]
Output: 1
Explanation: Remove cable between computer 1 and 2 and place between computers 1 and 3.
//

    **Approach : We simply have to calculate the number of connected components in the graph. After that we can return numberofComponents-1 as ans. 
    Also first do check wheather we have enough edges to connect the graph.
    
    void dfs(vector<vector<int>> &adj, int node, vector<int> &vis) {
        vis[node] = 1;
        for(auto it : adj[node]) {
            if(!vis[it]){
                dfs(adj, it, vis);
            }
        }
    }

    int makeConnected(int n, vector<vector<int>>& connections) {
        // checking wheather we have enough edges to connect or not.
        if(connections.size() < n-1)
            return -1;
        int numberOfComponents = 0;
        vector<vector<int>> adj(n);
        vector<int> vis(n, 0);
        for(int i=0; i<connections.size(); i++) {
            int u = connections[i][0];
            int v = connections[i][1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        for(int i=0; i<n; i++) {
            if(vis[i] == 0) {
                dfs(adj, i, vis);
                numberOfComponents++;
            }
        }
        return numberOfComponents-1;
    }
    T.C : O(N) DFS/BFS traversal.
    S.C : O(N) since we are using visited array.
---------------------------------------------------------------------------------------------------------

      ** Using Disjoint set :

      class DisjointSet {
          vector<int> rank, parent, size;
          public:
          
          DisjointSet(int n) {
              rank.resize(n+1);
              size.resize(n+1, 1);
              parent.resize(n+1);
              
              for(int i=0; i<=n; i++) {
                  parent[i] = i;
              }
          }
          // finding the ultimate parent along with path compressing.
          int findUltimateParent(int x) {
              if(parent[x] == x) {
                  return x;
              }
              
              return parent[x] = findUltimateParent(parent[x]);
          }
          
          // union by rank
          void unionByRank(int u, int v) {
              int ultimateParentU = findUltimateParent(u);
              int ultimateParentV = findUltimateParent(v);
              
              if(ultimateParentU == ultimateParentV)
                  return;
              
              if(rank[ultimateParentU] < rank[ultimateParentV]) {
                  parent[ultimateParentU] = ultimateParentV;
              }
              else if(rank[ultimateParentV] < rank[ultimateParentU]) {
                  parent[ultimateParentV] = ultimateParentU;
              }
              else {
                  parent[ultimateParentV] = ultimateParentU;
                  rank[ultimateParentU]++;
              }
          }
          
          // union by size.
          void unionBySize(int u, int v) {
              int ultimateParentU = findUltimateParent(u);
              int ultimateParentV = findUltimateParent(v);
              
              if(ultimateParentU == ultimateParentV)
                  return;
              
              if(size[ultimateParentU] < size[ultimateParentV]) {
                  parent[ultimateParentU] = ultimateParentV;
                  size[ultimateParentV] += size[ultimateParentU];
              }
              else if(size[ultimateParentV] < size[ultimateParentU]) {
                  parent[ultimateParentV] = ultimateParentU;
                  size[ultimateParentU] += size[ultimateParentV];
              }
              else {
                  parent[ultimateParentV] = ultimateParentU;
                  size[ultimateParentU] += size[ultimateParentV];
              }
          }
      };
      
      
      class Solution {
        public:
          int Solve(int n, vector<vector<int>> &edge) {
              
              // 1. Count the number of extra edges among the components.
              // 2. if components-1 <= extra edges return components-1 else -1;
              
              DisjointSet ds(n);
              int extraEdges = 0;
              for(int i=0; i<edge.size(); i++) {
                  
                  int u = edge[i][0];
                  int v = edge[i][1];
                  if(ds.findUltimateParent(u) != ds.findUltimateParent(v)) {
                      ds.unionBySize(u, v);
                  }
                  else {
                      extraEdges++;
                  }
                  
              }
              int numberOfComponents = 0;
              for(int i=0; i<n; i++) {
                  if(ds.findUltimateParent(i) == i) {
                      numberOfComponents++;
                  }
              }
              if(extraEdges >= numberOfComponents-1) {
                  return numberOfComponents-1;
              }
              return -1;
          }
      };
      T.C : O(M)
      T.C : O(N)
