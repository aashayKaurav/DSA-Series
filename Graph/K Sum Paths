//
Given a binary tree and an integer K. Find the number of paths in the tree which have their sum equal to K.
A path may start from any node and end at any node in the downward direction.


Example 1:

Input:      
Tree = 
          1                               
        /   \                          
       2     3
K = 3
Output: 2
Explanation:
Path 1 : 1 + 2 = 3
Path 2 : only leaf node 3
Example 2:

Input: 
Tree = 
           1
        /     \
      3        -1
    /   \     /   \
   2     1   4     5                        
        /   / \     \                    
       1   1   2     6    
K = 5                    
Output: 8
Explanation:
The following paths sum to K.  
3 2 
3 1 1 
1 3 1 
4 1 
1 -1 4 1 
-1 4 2 
5 
1 -1 5 
//

    ** Approach : We will traverse in DFS/BFS way to get all possible path. However we also have to store the count of prefix sum in map that have occured till this current 
    node so that we can get remSum = currSum - K in constant time. And recursively call for left and right subtree. Finally before leaving this current node pop it from
    the map.
    
    int countPathsUtil(Node* root, int targetSum, int currentSum, unordered_map<int, int>& sumCount) {
        if (root == nullptr)
            return 0;
    
        // Update the current sum by adding the current node's value
        currentSum += root->data;
    
        // Calculate the required difference to form the target sum
        int requiredSum = currentSum - targetSum;
    
        // Count the number of paths that have a sum equal to the required difference
        int totalCount = sumCount[requiredSum];
    
        // Increment the count of the current sum in the map
        sumCount[currentSum]++;
    
        // Recursively count the paths in the left and right subtrees
        totalCount += countPathsUtil(root->left, targetSum, currentSum, sumCount);
        totalCount += countPathsUtil(root->right, targetSum, currentSum, sumCount);
    
        // Decrement the count of the current sum to avoid its impact on other paths
        sumCount[currentSum]--;
    
        return totalCount;
    }
    
    int sumK(Node *root,int k)
    {
        unordered_map<int, int> sumCount;

        // Initialize the map with the base case of having a sum of 0
        sumCount[0] = 1;
    
        // Call the recursive helper function
        return countPathsUtil(root, k, 0, sumCount);
    }
    T.C : O(N)
    S.C : O(N)
