//
You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, 
where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, 
(rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.

A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.

Example 1:

heights = [[1,2,2],[3,8,2],[5,3,5]]
Output: 2
Explaination: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.
This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.

//
    ** Application of Dijkstra Algorithm
int MinimumEffort(vector<vector<int>>& heights) {
        int n = heights.size();
        int m = heights[0].size();
        vector<vector<int>> dist(n, vector<int>(m, INT_MAX));
        // {Diff, {row, col}} Since our constraint is based on minimun difference, therefore creating min heap based on difference.
        priority_queue<pair<int, pair<int, int>>, 
        vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;
        dist[0][0] = 0;
        pq.push({0, {0, 0}});
        while(!pq.empty()){
            auto a = pq.top();
            pq.pop();
            int diff = a.first;
            int row = a.second.first;
            int col = a.second.second;
            if(row == n-1 && col == m-1){
                return diff;
            }
            // Trying all 4 possibilities.
            if(row-1 >= 0){
                int newEffort = max(abs(heights[row][col]- heights[row-1][col]), diff);
                if(newEffort < dist[row-1][col]){
                    dist[row-1][col] = newEffort;
                    pq.push({newEffort, {row-1, col}});
                }
            }
            if(row+1 < n){
                int newEffort = max(abs(heights[row][col]- heights[row+1][col]), diff);
                if(newEffort < dist[row+1][col]){
                    dist[row+1][col] = newEffort;
                    pq.push({newEffort, {row+1, col}});
                }
            }
            if(col+1 < m){
                int newEffort = max(abs(heights[row][col]- heights[row][col+1]), diff);
                if(newEffort < dist[row][col+1]){
                    dist[row][col+1] = newEffort;
                    pq.push({newEffort, {row, col+1}});
                }
            }
            if(col-1 >= 0){
                int newEffort = max(abs(heights[row][col]- heights[row][col-1]), diff);
                if(newEffort < dist[row][col-1]){
                    dist[row][col-1] = newEffort;
                    pq.push({newEffort, {row, col-1}});
                }
            }
        }
        // Unreachable.
        return 0;
    }
