//
Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, Find the number of strongly connected components in the graph.
//

    ** Strongly connected components : A strongly connected component (SCC) of a directed graph is a subgraph in which there is a directed path between any two vertices.
    ** Approach : Kosaraju's Algorithm.
                  // 1. Store the vertices on basis of finishing time of DFS using stack.
                  // 2. Reverse the graph.
                  // 3. Perform the DFS by keep poping vertices from the stack.
                  // 4. Number of DFS calls = number of strongly connected components.

    class Solution
    {
    	public:
    	void dfs(vector<vector<int>>& adj, vector<int> &vis, stack<int> &st, int node) {
    	    vis[node] = 1;
    	    
    	    for(auto it : adj[node]) {
    	        if(!vis[it]) {
    	            dfs(adj, vis, st, it);
    	        }
    	    }
    	    st.push(node);
    	}
    	private:
    	void dfsSolve(int node, vector<int> adj[], vector<int> &vis) {
    	    vis[node] = 1;
    	    
    	    for(auto it : adj[node]) {
    	        if(!vis[it]) {
    	            dfsSolve(it, adj, vis);
    	        }
    	    }
    	}
    	
    	public:
    	//Function to find number of strongly connected components in the graph.
        int kosaraju(int V, vector<vector<int>>& adj)
        {
            // 1. Store the vertices on basis of finishing time of DFS using stack.
            // 2. Reverse the graph.
            // 3. Perform the DFS by keep poping vertices from the stack.
            // 4. Number of DFS calls = number of strongly connected components.
            
            stack<int> st;
            vector<int> vis(V);
            for(int i=0; i<V; i++) {
                if(!vis[i]) {
                    dfs(adj, vis, st, i);
                }
            }
            
            vector<int> adjTranspose[V];
            for(int i=0; i<V; i++) {
                vis[i] = 0;
                for(auto it : adj[i]) {
                    adjTranspose[it].push_back(i);
                }
            }
            int scc = 0;
            while(!st.empty()) {
                int node = st.top();
                st.pop();
                if(!vis[node]) {
                    scc++;
                    dfsSolve(node, adjTranspose, vis);
                }
            }
            
            return scc;
        }
    };
    
    //{ Driver Code Starts.
    
    
    int main()
    {
        
        int t;
        cin >> t;
        while(t--)
        {
        	int V, E;
        	cin >> V >> E;
    
        	vector<vector<int>> adj(V);
    
        	for(int i = 0; i < E; i++)
        	{
        		int u, v;
        		cin >> u >> v;
        		adj[u].push_back(v);
        	}
    
        	Solution obj;
        	cout << obj.kosaraju(V, adj) << "\n";
        }
    
        return 0;
    }
    T.C : O(N + M)
    S.C : O(N)
