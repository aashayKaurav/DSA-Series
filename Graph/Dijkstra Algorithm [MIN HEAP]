//
Given a weighted, undirected and connected graph of V vertices and an adjacency list adj where adj[i] is a list of lists containing two integers 
where the first integer of each list j denotes there is edge between i and j, second integers corresponds to the weight of that  edge.
You are given the source vertex S and You to Find the shortest distance of all the vertex's from the source vertex S. 
You have to return a list of integers denoting shortest distance between each node and Source vertex S.
 
Note: The Graph doesn't contain any negative weight cycle.

Example 1:

Input:
V = 3, E = 3
adj = {{{1, 1}, {2, 6}}, {{2, 3}, {0, 1}}, {{1, 3}, {0, 6}}}
S = 2
Output:
4 3 0
//


vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        vector<int> dist(V, INT_MAX);
        dist[S] = 0;
        // Min Heap containg pair<distance from source, to the Node>
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> mh;
        mh.push({0, S});
        while(!mh.empty()){
            
            int d = mh.top().first;
            int node = mh.top().second;
            mh.pop();
            
            for(auto it : adj[node]){
                int edgeWeight = it[1];
                int adjNode = it[0];
                // Whenever the minimum distance comes update the distance vector and push into min heap.
                if(d + edgeWeight < dist[adjNode]){
                    dist[adjNode] = d + edgeWeight;
                    mh.push({dist[adjNode], adjNode});
                }
            }
        }
        return dist;
    }
