//
The problem is to find the shortest distances between every pair of vertices in a given edge-weighted directed graph. 
The graph is represented as an adjacency matrix of size n*n. Matrix[i][j] denotes the weight of the edge from i to j. If Matrix[i][j]=-1, 
it means there is no edge from i to j. Do it in-place.

Example 1:

Input: matrix = {{0,1,43},{1,0,6},{-1,-1,0}}

Output: {{0,1,7},{1,0,6},{-1,-1,0}}

Explanation: We can reach 2 from 0 as 0->1->2
and the cost will be 1+6=7 which is less than 
43.
//

void shortest_distance(vector<vector<int>>&matrix){
	    int n = matrix.size();
      // Initializing with infinity if there is no edges so as to make computation easy.
	    for(int i=0; i<n; i++){
	        for(int j=0; j<n; j++){
	            if(matrix[i][j] == -1){
	                matrix[i][j] = 1e9;
	            }
              // Since there are no self loops therefore initiazing with 0.
	            if(i == j){
	                matrix[i][j] = 0;
	            }
	        }
	    }
	    
	    // Now evaluating the minimum distance via every(k) vertex to all other vertex and updating the matrix itself.
	    for(int k = 0; k<n; k++){
	        for(int i=0; i<n; i++){
	            for(int j=0; j<n; j++){
	                matrix[i][j] = min(matrix[i][j],
	                matrix[i][k] + matrix[k][j]);
	            }
	        }
	    }
	    
	    // Now if any vertex is unreachable then puting back -1 value.
	    for(int i=0; i<n; i++){
	        for(int j=0; j<n; j++){
	            if(matrix[i][j] == 1e9){
	                matrix[i][j] = -1;
	            }
	        }
	    }
	}
