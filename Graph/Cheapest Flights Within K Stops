//
There are n cities and m edges connected by some number of flights. You are given an array flights where 
flights[i] = [fromi, toi, pricei] indicates that there is a flight from the city fromi to city toi with cost pricei.

You are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.

Example 1:
Input:
n = 4
flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]]
src = 0
dst = 3
k = 1
Output:
700
//

int CheapestFLight(int n, vector<vector<int>>& flights, int src, int dst, int K)  {
        // {stops, {node, cost}}
        queue<pair<int, pair<int, int>>> q;
        vector<pair<int, int>> adj[n];
        vector<int> dist(n, INT_MAX);
        for(int i=0; i<flights.size(); i++){
            int u = flights[i][0];
            int v = flights[i][1];
            int wt = flights[i][2];
            adj[u].push_back({v, wt});
        }
        q.push({0, {src, 0}});
        // We are doing modification to Dijkstra Algo. Since we have to find the shortest
        // path but with the constraint that stops <= K. Therefore taking simple queue
        // and storing {stops, {node, cost}} then taking shortest path if stops<=K.
        while(!q.empty()){
            auto t = q.front();
            q.pop();
            int stops = t.first;
            int node = t.second.first;
            int cost = t.second.second;
            if(stops > K)
                continue;
            for(auto i : adj[node]){
                int adjNode = i.first;
                int edWt = i.second;
                if(cost + edWt < dist[adjNode]){
                    dist[adjNode] = cost + edWt;
                    q.push({stops+1, {adjNode, dist[adjNode]}});
                }
            }
        }
        
        if(dist[dst] == INT_MAX){
            return -1;
        }
        return dist[dst];
    }
