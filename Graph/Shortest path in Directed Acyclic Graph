// 
Given a Directed Acyclic Graph of N vertices from 0 to N-1 and a 2D Integer array(or vector) edges[ ][ ] of length M, where there is a directed edge from edge[i][0] to edge[i][1] with a distance of edge[i][2] for all i, 0<=i

Find the shortest path from src(0) vertex to all the vertices and if it is impossible to reach any vertex, then return -1 for that vertex.
//

void topoSort(int i, vector<int> &vis, stack<int> &st, vector<pair<int, int>> adj[]){
        vis[i] = 1;
        for(auto it : adj[i]){
            int node = it.first;
            if(vis[node] == 0){
                topoSort(node, vis, st, adj);
            }
        }
        st.push(i);
    }
  
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        vector<pair<int, int>> adj[N];
        for(int i=0; i<M; i++){
            adj[edges[i][0]].push_back({edges[i][1], edges[i][2]});
        }
        vector<int> vis(N, 0);
        stack<int> st;
        for(int i=0; i<N; i++){
            if(vis[i] == 0){
                topoSort(i, vis, st, adj);
            }
        }
        vector<int> dist(N);
        for(int i=0; i<N; i++){
            dist[i] = 1e9;
        }
        dist[0] = 0;
        while(!st.empty()){
            int node = st.top();
            st.pop();
            for(auto it : adj[node]){
                int v = it.first;
                int wt = it.second;
                if(dist[node] + wt < dist[v]){
                    dist[v] = dist[node] + wt;
                }
            }
        }
        for(int i=0;i<N;i++){
            if(dist[i]==1e9){
                dist[i]=-1;
            }
        }
        return dist;
    }
