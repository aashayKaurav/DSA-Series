//
T.C : O(4 * Alpha) // constant O(1)
//

#include <bits/stdc++.h>

using namespace std;

class DisjointSet {
    vector<int> rank, parent, size;
    public:
    
    DisjointSet(int n) {
        rank.resize(n+1);
        size.resize(n+1, 1);
        parent.resize(n+1);
        
        for(int i=0; i<=n; i++) {
            parent[i] = i;
        }
    }
    // finding the ultimate parent along with path compressing.
    int findUltimateParent(int x) {
        if(parent[x] == x) {
            return x;
        }
        
        return parent[x] = findUltimateParent(parent[x]);
    }
    
    // union by rank
    void unionByRank(int u, int v) {
        int ultimateParentU = findUltimateParent(u);
        int ultimateParentV = findUltimateParent(v);
        
        if(ultimateParentU == ultimateParentV)
            return;
        
        if(rank[ultimateParentU] < rank[ultimateParentV]) {
            parent[ultimateParentU] = ultimateParentV;
        }
        else if(rank[ultimateParentV] < rank[ultimateParentU]) {
            parent[ultimateParentV] = ultimateParentU;
        }
        else {
            parent[ultimateParentV] = ultimateParentU;
            rank[ultimateParentU]++;
        }
    }
    
    // union by size.
    void unionBySize(int u, int v) {
        int ultimateParentU = findUltimateParent(u);
        int ultimateParentV = findUltimateParent(v);
        
        if(ultimateParentU == ultimateParentV)
            return;
        
        if(size[ultimateParentU] < size[ultimateParentV]) {
            parent[ultimateParentU] = ultimateParentV;
            size[ultimateParentV] += size[ultimateParentU];
        }
        else if(size[ultimateParentV] < size[ultimateParentU]) {
            parent[ultimateParentV] = ultimateParentU;
            size[ultimateParentU] += size[ultimateParentV];
        }
        else {
            parent[ultimateParentV] = ultimateParentU;
            size[ultimateParentU] += size[ultimateParentV];
        }
    }
};

int main()
{
    DisjointSet ds(7);
    // ds.unionByRank(1, 2);
    // ds.unionByRank(2, 3);
    // ds.unionByRank(4, 5);
    // ds.unionByRank(6, 7);
    // ds.unionByRank(5, 6);
    
    // if(ds.findUltimateParent(7) == ds.findUltimateParent(3)){
    //     cout << "Same ultimate parent! \n";
    // }
    // else cout << "Not same parent. \n";
    
    // ds.unionByRank(3, 7);
    
    // if(ds.findUltimateParent(7) == ds.findUltimateParent(3)){
    //     cout << "Same ultimate parent! \n";
    // }
    // else cout << "Not same parent. \n";
    
    ds.unionBySize(1, 2);
    ds.unionBySize(2, 3);
    ds.unionBySize(4, 5);
    ds.unionBySize(6, 7);
    ds.unionBySize(5, 6);
    
    if(ds.findUltimateParent(7) == ds.findUltimateParent(3)){
        cout << "Same ultimate parent! \n";
    }
    else cout << "Not same parent. \n";
    
    ds.unionBySize(3, 7);
    
    if(ds.findUltimateParent(7) == ds.findUltimateParent(3)){
        cout << "Same ultimate parent! \n";
    }
    else cout << "Not same parent. \n";
    
    return 0;
}
