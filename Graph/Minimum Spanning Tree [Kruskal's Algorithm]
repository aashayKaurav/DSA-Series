//
Given a weighted, undirected and connected graph of V vertices and E edges. The task is to find the sum of weights of the edges of the Minimum Spanning Tree.

Example 1:

Input:
3 3
(u, v, wt)
0 1 5
1 2 3
0 2 1

Output:
4
//
class DisjointSet{
    vector<int> rank;
    vector<int> size;
    vector<int> parent;
    
    public:
    
    DisjointSet(int V){
        rank.resize(V+1, 0);
        parent.resize(V+1, 0);
        size.resize(V+1, 1);
        for(int i=0; i<V; i++){
            parent[i] = i;
        }
    }
    
    int findUParent(int u){
        if(u == parent[u]){
            return u;
        }
        return parent[u] = findUParent(parent[u]);
    }
    
    void unionByRank(int u, int v){
        int ulp_u = findUParent(u);
        int ulp_v = findUParent(v);
        
        if(ulp_u == ulp_v){
            return;
        }
        else if(rank[ulp_u] < rank[ulp_v]){
            parent[ulp_u] = ulp_v;
        }
        else if(rank[ulp_v] < rank[ulp_u]){
            parent[ulp_v] = ulp_u;
        }
        else{
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }
    
    void unionBySize(int u, int v){
        int ulp_u = findUParent(u);
        int ulp_v = findUParent(v);
        if(ulp_u == ulp_v){
            return;
        }
        else if(size[ulp_u] < size[ulp_v]){
            parent[ulp_u] = ulp_v;
        }
        else if(size[ulp_v] < size[ulp_u]){
            parent[ulp_v] = ulp_u;
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u]++;
        }
    }
};

int spanningTree(int V, vector<vector<int>> adj[])
    {
        vector<pair<int, pair<int, int>>> edges;
        for(int i=0; i<V; i++){
            for(auto it : adj[i]){
                int adjNode = it[0];
                int wt = it[1];
                int node = i;
                edges.push_back({wt, {node, adjNode}});
            }
        }
        // Step 1. Sort the edges by weight.
        sort(edges.begin(), edges.end());
        int mst = 0;
        DisjointSet ds(V);
        for(auto it : edges){
            int wt = it.first;
            int u = it.second.first;
            int v = it.second.second;
            // Step 2. Take the min wt edge and check whether the two nodes have ultimate parent, it they don't then add into MST and do unionByRank or unionBySize.
            if(ds.findUParent(u) != ds.findUParent(v)){
                mst += wt;
                ds.unionBySize(u, v);
            }
        }
        
        return mst;
    }
