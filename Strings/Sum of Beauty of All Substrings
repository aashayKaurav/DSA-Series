//
The beauty of a string is the difference in frequencies between the most frequent and least frequent characters.

For example, the beauty of "abaacc" is 3 - 1 = 2.
Given a string s, return the sum of beauty of all of its substrings.

Example 1:

Input: s = "aabcb"
Output: 5
Explanation: The substrings with non-zero beauty are ["aab","aabc","aabcb","abcb","bcb"], each with beauty equal to 1.
Example 2:

Input: s = "aabcbaa"
Output: 17
//

    ** Approach : We can use map to store the frequencies and loop to get all the sub arrays. Then for each sub array get the maxFre and minFre and subtract them 
    then add into ans. return ans.
    
    int beautySum(string s) {
        int n=s.size(), ans = 0, minFreq = 500, maxFreq = 0;
        for(int i=0;i<n;i++){
            map<char,int>mp;
            for(int j=i;j<n;j++){
                mp[s[j]]++;
                for(auto& it:mp){
                    minFreq = min(minFreq,it.second);
                    maxFreq = max(maxFreq,it.second);
                }
                ans += (maxFreq - minFreq);
                minFreq = 500;
                maxFreq = 0;
            }
            mp.clear();
        }
        return ans;
    }
    T.C : O(N^2)
    S.C : O(N)
