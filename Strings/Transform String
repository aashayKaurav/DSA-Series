//
Given two strings A and B. Find the minimum number of steps required to transform string A into string B. 
The only allowed operation for the transformation is selecting a character from string A and inserting it in the beginning of string A.

Example 1:

Input:
A = "abd"
B = "bad"
Output: 1
Explanation: The conversion can take place in
1 operation: Pick 'b' and place it at the front.
Example 2:

Input:
A = "GeeksForGeeks"
B = "ForGeeksGeeks"
Output: 3
Explanation: The conversion can take
place in 3 operations:
Pick 'r' and place it at the front.
A = "rGeeksFoGeeks"
Pick 'o' and place it at the front.
A = "orGeeksFGeeks"
Pick 'F' and place it at the front.
A = "ForGeeksGeeks"
//

    ** Approach : Firstly check whether the size of both the strings are equal or not, if mnot return -1. Also check whether they have same freq of characters.
    Now to get the min no of steps we will check strings from right to left. If chars are matching move both the pointers else only move i pointer and increment ans. 
    This is how we will know the chars that are to be move in front. Return the ans!!
    
    int transform (string A, string B)
    {
        if(A.size() != B.size()) return -1;
        
        vector<int> mp(256, 0);
        
        for(int i=0; i<A.size(); i++) {
            mp[A[i]]++;
        }
        for(int i=0; i<B.size(); i++) {
            if(mp[B[i]] == 0) return -1;
            mp[B[i]]--;
        }
        int i=A.size()-1, j=A.size()-1;
        int res = 0;
        while(i >= 0 && j >= 0) {
            while(i >= 0 && A[i] != B[j]) {
                i--;
                res++;
            }
            i--;
            j--;
        }
        return res;
    }
    T.C : O(N)
    S.C : O(1)
