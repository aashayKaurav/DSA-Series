//
Given two strings 'str1' and 'str2', check if these two strings are isomorphic to each other.
Two strings str1 and str2 are called isomorphic if there is a one to one mapping possible for every character of str1 to every character of str2 while preserving the order.
Note: All occurrences of every character in str1 should map to the same character in str2

Example 1:

Input:
str1 = aab
str2 = xxy
Output: 1
Explanation: There are two different
charactersin aab and xxy, i.e a and b
with frequency 2and 1 respectively.
Example 2:

Input:
str1 = aab
str2 = xyz
Output: 0
Explanation: There are two different
charactersin aab but there are three
different charactersin xyz. So there
won't be one to one mapping between
str1 and str2.
//

    ** Approach : To keep track of characters by 1 to 1 mapping, we can use maps and check at each iteration whether that character have appeared before or not
    if appeared before and not equal to current character then simply return false. Otherwise after the loop ends return true.
    
    bool areIsomorphic(string str1, string str2)
    {
        if(str1.size()!=str2.size()){
            return false;
        }
        vector<int> mp1(256, 0), mp2(256, 0);
        for(int i=0; i<str1.size(); i++) {
            if(mp1[str1[i]] == 0 && mp2[str2[i]] == 0) {
                mp1[str1[i]] = str2[i];
                mp2[str2[i]] = str1[i];
            }
            else if(mp1[str1[i]] != str2[i]){
                return false;
            }
        }
        return true;
    }
    T.C : O(N)
    S.C : O(1)
