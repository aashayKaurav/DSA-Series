//
Given string str, find the length of the longest repeating subsequence such that it can be found twice in the given string.

The two identified subsequences A and B can use the same ith character from string str if and only if that ith character has different indices in A and B. 
For example, A = "xax" and B = "xax" then the index of first "x" must be different in the original string for A and B.

Example 1:

Input:
str = "axxzxy"
Output: 2
Explanation:
The given array with indexes looks like
a x x z x y 
0 1 2 3 4 5

The longest subsequence is "xx". 
It appears twice as explained below.

subsequence A
x x
0 1  <-- index of subsequence A
------
1 2  <-- index of str 


subsequence B
x x
0 1  <-- index of subsequence B
------
2 4  <-- index of str 

We are able to use character 'x' 
(at index 2 in str) in both subsequences
as it appears on index 1 in subsequence A 
and index 0 in subsequence B.
Example 2:

Input:
str = "axxxy"
Output: 2
Explanation:
The given array with indexes looks like
a x x x y 
0 1 2 3 4

The longest subsequence is "xx". 
It appears twice as explained below.

subsequence A
x x
0 1  <-- index of subsequence A
------
1 2  <-- index of str 

subsequence B
x x
0 1  <-- index of subsequence B
------
2 3  <-- index of str 

We are able to use character 'x' 
(at index 2 in str) in both subsequences
as it appears on index 1 in subsequence A 
and index 0 in subsequence B.
//

    ** Approach : Variation of LCS !!
    Here we can use the logic of Longest Common Subsequence (LCS) with just one modification that if the characters match then we will also check that their indexes 
    are not same. And we can finally return the ans.
    
    int solve(string &s1, int i, int j, vector<vector<int>> &dp) {
	        if(i < 0 || j < 0) {
	            return 0;
	        }
	        if(dp[i][j] != -1) {
	            return dp[i][j];
	        }
	        if(s1[i] == s1[j] && i != j) {
	            return dp[i][j] = 1 + solve(s1, i-1, j-1, dp);
	        }
	        else
	            return dp[i][j] = max(solve(s1, i-1, j, dp), solve(s1, i, j-1, dp));
	    }
	
		int LongestRepeatingSubsequence(string str){
		    int n = str.size();
		    vector<vector<int>> dp(n+1, vector<int>(n+1, -1));
		    return solve(str,  n-1, n-1, dp);
		}
    T.C : O(N^2)
    S.C : O(N^2)
