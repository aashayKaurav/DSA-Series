//
Given a string S with repeated characters. The task is to rearrange characters in a string such that no two adjacent characters are the same.
Note: The string has only lowercase English alphabets and it can have multiple solutions. Return any one of them.

Example 1:

Input : str = "geeksforgeeks"
Output: 1
Explanation: All the repeated characters of the
given string can be rearranged so that no 
adjacent characters in the string is equal.
Any correct rearrangement will show a output
of 1.
Example 2:

Input : str = "bbbbb"
Output: 0
Explanation: Repeated characters in the string
cannot be rearranged such that there should not
be any adjacent repeated character.
//

    ** Approach : Use Max heap which contains freq of each char in the string. We will take high freq char add it to ans then decrement the freq of that char, again take
    second high freq char add to ans. Keep doing until heap size is > 1. For last character if freq > 1 then definately we can't have that string so return "-1" else 
    retuen ans.
    
    string rearrangeString(string str)
    {
        string ans = "";
        unordered_map<char, int> mp;
        for(int i=0; i<str.size(); i++) {
            mp[str[i]]++;
        }
        priority_queue<pair<int, char>> pq;
        for(auto it : mp) {
            pq.push({it.second, it.first});
        }
        while(pq.size() > 1) {
            auto first = pq.top();
            pq.pop();
            auto second = pq.top();
            pq.pop();
            ans += first.second;
            first.first -= 1;
            ans += second.second;
            second.first -= 1;
            if(first.first>0) pq.push(first);
            if(second.first>0) pq.push(second);
        }
        if(pq.size() == 1) {
            auto it = pq.top();
            pq.pop();
            if(it.first > 1) return "-1";
            ans += it.second;
        }
        return ans;
    }
    T.C : O(NLogN)
    S.C : O(N)
