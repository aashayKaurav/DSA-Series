//
Given two strings S and P. Find the smallest window in the string S consisting of all the characters(including duplicates) of the string P.  
Return "-1" in case there is no such window present. In case there are multiple such windows of same length, return the one with the least starting index.
Note : All characters are in Lowercase alphabets. 

Example 1:

Input:
S = "timetopractice"
P = "toc"
Output: 
toprac
Explanation: "toprac" is the smallest
substring in which "toc" can be found.
Example 2:

Input:
S = "zoomlazapzo"
P = "oza"
Output: 
apzo
Explanation: "apzo" is the smallest 
substring in which "oza" can be found.
//

     ** Approach : SLIDING WINDOW Technique
     We will first store the char frequencies of p string then run the loop, we will first increse the size of the window untill all the cgharacters of the s string
     is containing all chars of p string. Then we will try to reduce the window from left side inorder to look for better ans.
     
     string smallestWindow (string s, string p)
    {
        int n = s.length();
        int m = p.length();
        
        if (m > n) {
            return "-1";
        }
        
        // frequency arrays for s and p
        int sFreq[26] = {0};
        int pFreq[26] = {0};
        
        // update p's frequency array
        for (int i = 0; i < m; i++) {
            pFreq[p[i] - 'a']++;
        }
        
        int start = 0, end = 0;
        int count = 0;
        int minLength = INT_MAX;
        int startIndex = -1;
        
        // iterate through s
        while (end < n) {
            // update s's frequency array
            sFreq[s[end] - 'a']++;
            // if the frequency of the current character in s is <= the frequency in p
            // increment the count of characters that match between s and p
            if (sFreq[s[end] - 'a'] <= pFreq[s[end] - 'a']) {
                count++;
            }
            
            // if all characters from p are in the current window
            if (count == m) {
                // move the start pointer until we have all characters from p in the window
                while (sFreq[s[start] - 'a'] > pFreq[s[start] - 'a']) {
                    sFreq[s[start] - 'a']--;
                    start++;
                }
                
                // update the minimum window length
                int windowLength = end - start + 1;
                if (windowLength < minLength) {
                    minLength = windowLength;
                    startIndex = start;
                }
            }
            
            end++;
        }
        
        // return the minimum window substring
        if (startIndex == -1) {
            return "-1";
        } else {
            return s.substr(startIndex, minLength);
        }
    }
    T.C : O(|S|)
    S.C : O(1)
