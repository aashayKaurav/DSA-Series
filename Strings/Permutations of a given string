//
Given a string S. The task is to print all unique permutations of the given string in lexicographically sorted order.

Example 1:

Input: ABC
Output:
ABC ACB BAC BCA CAB CBA
Explanation:
Given string ABC has permutations in 6 
forms as ABC, ACB, BAC, BCA, CAB and CBA .
Example 2:

Input: ABSG
Output:
ABGS ABSG AGBS AGSB ASBG ASGB BAGS 
BASG BGAS BGSA BSAG BSGA GABS GASB 
GBAS GBSA GSAB GSBA SABG SAGB SBAG 
SBGA SGAB SGBA
Explanation:
Given string ABSG has 24 permutations.
//

    ** Approach : We will use Backtracking concept. The idea is to fix one character(index) and run a loop and swaps with all the characters. Then reswap the swapped 
    characters.
    
    unordered_set<string> st;
	    
	    void permute(string str, int index, vector<string> &ans) {
	        if(index >= str.size()) {
	            if(st.find(str) == st.end()){
                    ans.push_back(str);
                    st.insert(str);
                    return;
                }
	        }
	        
	        for(int i=index; i<str.size(); i++) {
	            swap(str[i], str[index]);
	            
	            permute(str, index+1, ans);
	            
	            swap(str[i], str[index]);
	        }
	    }
	
		vector<string>find_permutation(string S)
		{
		    vector<string> ans;
		    int index = 0;
		    permute(S, index, ans);
		    sort(ans.begin(), ans.end());
		    return ans;
		}
    T.C : O(n! * n)
    S.C : O(n! * n)
