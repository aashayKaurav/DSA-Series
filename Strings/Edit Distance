//
Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
//

    ** All Three Approaches ... Mem, Tab, Opt
    
    int solve(string &s1, string &s2, int i, int j, vector<vector<int>> &dp){
        if(i == s1.length())
            return s2.length()-j;
        
        if(j == s2.length())
            return s1.length()-i;
        
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        int ans = 0;
        if(s1[i] == s2[j]){
            return solve(s1, s2, i+1, j+1, dp);
        }
        else{
            int insertAns = 1 + solve(s1, s2, i, j+1, dp);
            int deleteAns = 1 + solve(s1, s2, i+1, j, dp);
            int replaceAns = 1 + solve(s1, s2, i+1, j+1, dp);
            ans = min(insertAns, min(deleteAns, replaceAns));
        }
        return dp[i][j] = ans;
    }
    
    int solveTab(string &s1, string &s2, int n, int m){
        vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
        
        for(int i=0; i<=n; i++){
            for(int j=0; j<=m; j++){
                if(i == 0){
                    dp[i][j] = j;
                }
                else if(j == 0){
                    dp[i][j] = i;
                }
                else if(s1[i-1] == s2[j-1]){
                    dp[i][j] = dp[i-1][j-1];
                }
                else{
                    int ins = 1 + dp[i][j-1];
                    int del = 1 + dp[i-1][j];
                    int rep = 1 + dp[i-1][j-1];
                    dp[i][j] = min(ins, min(del, rep));
                }
            }
        }
        return dp[n][m];
    }
    
    int optimized(string &s1, string &s2, int n, int m){
        vector<int> curr(m+1, 0);
        vector<int> prev(m+1, 0);
        for(int i=0; i<=m; i++)
            prev[i] = i;
        
        for(int i=1; i<=n; i++){
            curr[0] = i;
            for(int j=1; j<=m; j++){
                if(s1[i-1] == s2[j-1]){
                    curr[j] = prev[j-1];
                }
                else{
                    int ins = 1 + curr[j-1];
                    int del = 1 + prev[j];
                    int rep = 1 + prev[j-1];
                    curr[j] = min(ins, min(del, rep));
                }
            }
            prev = curr;
        }
        return prev[m];
    }
    
    int minDistance(string word1, string word2) {
        // vector<vector<int>> dp(word1.length(), vector<int>(word2.length(), -1));
        // return solve(word1, word2, 0, 0, dp);        
        // solveTab(word1, word2, word1.length(), word2.length());
        return optimized(word1, word2, word1.length(), word2.length());
    }
    T.C : O(N*M)
    S.C : O(M)
