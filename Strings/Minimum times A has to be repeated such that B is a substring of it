//
Given two strings A and B. 
Find minimum number of times A has to be repeated such that B is a Substring of it. If B can never be a substring then return -1.

Example 1:

Input:
A = "abcd"
B = "cdabcdab"
Output:
3
Explanation:
Repeating A three times (abcdabcdabcd),
B is a substring of it. B is not a substring
of A when it is repeated less than 3 times.
//
      ***Intition is that the till this condition (A.size < B.size) we need to add string A to A. 
      // After that check using the string find function that B is a substring of A or not if not then again add string one more time to check whether 
      // the string present or not otherwise return -1.    :)
int minRepeats(string A, string B) {
        int count = 1;
        string rep = A;
      
        while(A.size() < B.size()){
            A += rep;
            count++;
        }
        // string::npos == -1 (It represents the end of the string)
        if(A.find(B) != string::npos){
            return count;
        }
        A += rep;
        count++;
        if(A.find(B) != string::npos){
            return count;
        }
        return -1;
    }


